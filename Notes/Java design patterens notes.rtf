{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 AppleColorEmoji;
\f3\ftech\fcharset77 Symbol;\f4\fmodern\fcharset0 Courier;\f5\fmodern\fcharset0 Courier-Bold;
\f6\fnil\fcharset0 HelveticaNeue;\f7\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;\red0\green0\blue0;
\red179\green179\blue179;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;\cssrgb\c0\c0\c0\c84706;
\cssrgb\c75294\c75294\c75294;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid27}
{\list\listtemplateid28\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid28}
{\list\listtemplateid29\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid29}
{\list\listtemplateid30\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid30}
{\list\listtemplateid31\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid31}
{\list\listtemplateid32\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid32}
{\list\listtemplateid33\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid33}
{\list\listtemplateid34\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid34}
{\list\listtemplateid35\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid35}
{\list\listtemplateid36\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid36}
{\list\listtemplateid37\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid37}
{\list\listtemplateid38\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid38}
{\list\listtemplateid39\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid3801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid39}
{\list\listtemplateid40\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid3901\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid40}
{\list\listtemplateid41\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid41}
{\list\listtemplateid42\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid42}
{\list\listtemplateid43\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid4201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid43}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}{\listoverride\listid28\listoverridecount0\ls28}{\listoverride\listid29\listoverridecount0\ls29}{\listoverride\listid30\listoverridecount0\ls30}{\listoverride\listid31\listoverridecount0\ls31}{\listoverride\listid32\listoverridecount0\ls32}{\listoverride\listid33\listoverridecount0\ls33}{\listoverride\listid34\listoverridecount0\ls34}{\listoverride\listid35\listoverridecount0\ls35}{\listoverride\listid36\listoverridecount0\ls36}{\listoverride\listid37\listoverridecount0\ls37}{\listoverride\listid38\listoverridecount0\ls38}{\listoverride\listid39\listoverridecount0\ls39}{\listoverride\listid40\listoverridecount0\ls40}{\listoverride\listid41\listoverridecount0\ls41}{\listoverride\listid42\listoverridecount0\ls42}{\listoverride\listid43\listoverridecount0\ls43}}
\paperw11900\paperh16840\margl1440\margr1440\vieww30040\viewh18340\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Singleton Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Singleton Pattern
\f1\b0  is a 
\f0\b creational design pattern
\f1\b0  that ensures a class has 
\f0\b only one instance
\f1\b0  and provides a 
\f0\b global point of access
\f1\b0  to that instance.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Singleton Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Ensures a single instance
\f1\b0  
\f3 \uc0\u8594 
\f1  Prevents multiple objects from being created.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Saves memory
\f1\b0  
\f3 \uc0\u8594 
\f1  Avoids redundant objects and reduces resource usage.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Provides a global access point
\f1\b0  
\f3 \uc0\u8594 
\f1  All parts of the program can access the same instance.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Useful for shared resources
\f1\b0  
\f3 \uc0\u8594 
\f1  Database connections, logging, configuration settings, etc.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Common Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6171\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6171\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Logging
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Maintain a single logger instance for the entire application.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6171\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Configuration Management
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Store global app settings in a single instance.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6171\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Database Connection
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Ensure a single database connection object.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6171\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Thread Pools
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Prevent excessive thread pool creation.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6171\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Cache Management
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Maintain a single cache instance to avoid duplicate data storage.\cell \lastrow\row
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Basic Singleton (Eager Initialization)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 // Singleton using Eager Initialization\
class EagerSingleton \{\
    // Single instance created at class loading\
    private static final EagerSingleton INSTANCE = new EagerSingleton();\
\
    // Private constructor to prevent external instantiation\
    private EagerSingleton() \{\}\
\
    // Public method to get the instance\
    public static EagerSingleton getInstance() \{\
        return INSTANCE;\
    \}\
\}\
\
// Test Singleton\
public class SingletonDemo \{\
    public static void main(String[] args) \{\
        EagerSingleton obj1 = EagerSingleton.getInstance();\
        EagerSingleton obj2 = EagerSingleton.getInstance();\
\
        System.out.println(obj1 == obj2); // Output: true (Both references point to the same instance)\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Instance is created when the class loads.
\f1\b0 \uc0\u8232 
\f2 \uc0\u10060 
\f1  
\f0\b Drawback
\f1\b0  
\f3 \uc0\u8594 
\f1  
\f0\b Consumes memory even if never used.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 2. Lazy Initialization (Created When Needed)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 // Singleton using Lazy Initialization\
class LazySingleton \{\
    private static LazySingleton instance;\
\
    private LazySingleton() \{\}\
\
    public static LazySingleton getInstance() \{\
        if (instance == null) \{\
            instance = new LazySingleton();\
        \}\
        return instance;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Instance is created only when needed.
\f1\b0 \uc0\u8232 
\f2 \uc0\u10060 
\f1  
\f0\b Not thread-safe!
\f1\b0  Multiple threads might create multiple instances.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 3. Thread-Safe Singleton (Synchronized Method)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 class ThreadSafeSingleton \{\
    private static ThreadSafeSingleton instance;\
\
    private ThreadSafeSingleton() \{\}\
\
    public static synchronized ThreadSafeSingleton getInstance() \{\
        if (instance == null) \{\
            instance = new ThreadSafeSingleton();\
        \}\
        return instance;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Ensures only one instance is created, even in multi-threaded environments.
\f1\b0 \uc0\u8232 
\f2 \uc0\u10060 
\f1  
\f0\b Performance overhead
\f1\b0  
\f3 \uc0\u8594 
\f1  Synchronization makes it slower.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 4. Best Practice: Double-Checked Locking (Efficient & Thread-Safe)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 class DoubleCheckedLockingSingleton \{\
    private static volatile DoubleCheckedLockingSingleton instance;\
\
    private DoubleCheckedLockingSingleton() \{\}\
\
    public static DoubleCheckedLockingSingleton getInstance() \{\
        if (instance == null) \{\
            synchronized (DoubleCheckedLockingSingleton.class) \{\
                if (instance == null) \{\
                    instance = new DoubleCheckedLockingSingleton();\
                \}\
            \}\
        \}\
        return instance;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Thread-safe & high performance.
\f1\b0 \uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Uses 
\f5 \strokec2 volatile
\f0 \strokec2  to prevent instruction reordering issues.
\f1\b0 \uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Only synchronized when 
\f5 \strokec2 instance
\f0 \strokec2  is null (improves performance).
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 5. Singleton Using Enum (Best and Simplest Approach)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 enum EnumSingleton \{\
    INSTANCE;\
\
    public void showMessage() \{\
        System.out.println("Hello from Singleton!");\
    \}\
\}\
\
public class SingletonEnumDemo \{\
    public static void main(String[] args) \{\
        EnumSingleton instance1 = EnumSingleton.INSTANCE;\
        EnumSingleton instance2 = EnumSingleton.INSTANCE;\
\
        instance1.showMessage(); // Output: Hello from Singleton!\
        System.out.println(instance1 == instance2); // Output: true\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Prevents reflection attacks.
\f1\b0 \uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Prevents serialization issues.
\f1\b0 \uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Best practice for implementing Singleton in Java.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Singleton Implementations & When to Use\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2607\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3091\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4665\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2740\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Singleton Type\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Features\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Pros\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Cons\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2607\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3091\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4665\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2740\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Eager Initialization
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Instance created at class loading\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Simple, thread-safe\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Wastes memory if unused\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2607\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3091\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4665\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2740\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Lazy Initialization
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Instance created on first request\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Saves memory\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Not thread-safe\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2607\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3091\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4665\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2740\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Thread-Safe Singleton
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Uses synchronized method\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Thread-safe\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Slow due to synchronization\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2607\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3091\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4665\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2740\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Double-Checked Locking
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Efficient & thread-safe\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 High performance\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 More complex\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2607\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3091\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4665\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth2740\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Enum Singleton
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Uses an 
\f4 enum
\f1 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Best approach, handles reflection & serialization\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Limited flexibility\cell \lastrow\row
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 2. When to Use Singleton Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need 
\f0\b only one instance
\f1\b0  of a class throughout the application.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the 
\f0\b same instance
\f1\b0  must be shared among multiple components.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b control access to shared resources
\f1\b0  like logs, configurations, or connections.\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 \
==================================================================================\
Factory Method Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Factory Method Pattern
\f1\b0  is a 
\f0\b creational design pattern
\f1\b0  that provides an interface for creating objects 
\f0\b but lets subclasses decide which class to instantiate
\f1\b0 .\
Instead of directly creating objects using 
\f4 \strokec2 new
\f1 \strokec2 , a factory method is used to 
\f0\b delegate object creation
\f1\b0  to subclasses.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Factory Method Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Encapsulates object creation
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients don\'92t need to know which class to instantiate.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Promotes loose coupling
\f1\b0  
\f3 \uc0\u8594 
\f1  The client depends on an abstract class/interface rather than concrete implementations.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  New product types can be introduced without modifying existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Enhances maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Reduces dependencies between client code and concrete classes.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Transportation Service\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b transportation service
\f1\b0  that provides different vehicles:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Car
\f1\b0  for personal trips\
\ls2\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Bike
\f1\b0  for fast solo travel\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Instead of creating objects like 
\f4 \strokec2 new Car()
\f1 \strokec2  or 
\f4 \strokec2 new Bike()
\f1 \strokec2 , we use a 
\f0\b Factory Method
\f1\b0  to create the right vehicle.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define the Product Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 // Product Interface: Defines a common behavior for all transport types\
interface Transport \{\
    void deliver();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  All transport types 
\f0\b implement this interface
\f1\b0  and define the 
\f4 \strokec2 deliver()
\f1 \strokec2  method.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Product Classes\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 // Concrete Product: Car\
class Car implements Transport \{\
    @Override\
    public void deliver() \{\
        System.out.println("Delivering by Car.");\
    \}\
\}\
\
// Concrete Product: Bike\
class Bike implements Transport \{\
    @Override\
    public void deliver() \{\
        System.out.println("Delivering by Bike.");\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each transport type 
\f0\b implements the 
\f5 \strokec2 deliver()
\f0 \strokec2  method differently
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Define the Creator Abstract Class (Factory)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 // Creator (Factory) Class: Defines a factory method\
abstract class TransportFactory \{\
    // Factory Method: Must be implemented by subclasses\
    abstract Transport createTransport();\
\
    // Common method that uses the product\
    public void planDelivery() \{\
        Transport transport = createTransport();\
        transport.deliver();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Defines a 
\f5 \strokec2 createTransport()
\f0 \strokec2  method
\f1\b0  
\f3 \uc0\u8594 
\f1  Subclasses decide which transport to create.\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f4 \strokec2 planDelivery()
\f1 \strokec2  uses the transport 
\f0\b without knowing its concrete type
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Create Concrete Factories\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 // Concrete Factory: Car Factory\
class CarFactory extends TransportFactory \{\
    @Override\
    Transport createTransport() \{\
        return new Car();\
    \}\
\}\
\
// Concrete Factory: Bike Factory\
class BikeFactory extends TransportFactory \{\
    @Override\
    Transport createTransport() \{\
        return new Bike();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each factory 
\f0\b creates a specific transport type
\f1\b0 .\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  The client code calls 
\f4 \strokec2 createTransport()
\f1 \strokec2  
\f0\b without knowing which class is instantiated
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Test the Factory Method Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 public class FactoryMethodDemo \{\
    public static void main(String[] args) \{\
        // Create a Car Factory\
        TransportFactory carFactory = new CarFactory();\
        carFactory.planDelivery();  // Output: Delivering by Car.\
\
        // Create a Bike Factory\
        TransportFactory bikeFactory = new BikeFactory();\
        bikeFactory.planDelivery();  // Output: Delivering by Bike.\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 Delivering by Car.\
Delivering by Bike.\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Factory handles object creation
\f1\b0  instead of using 
\f4 \strokec2 new
\f1 \strokec2 .\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Client code (main method) is decoupled from concrete implementations.
\f1\b0 \uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Easily extendable
\f1\b0  
\f3 \uc0\u8594 
\f1  Just add a new factory class for more transport types.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Factory Method Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Encapsulates object creation logic
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients don\'92t worry about how objects are created.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  New product types can be added without modifying existing factories.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Promotes loose coupling
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients depend on an abstract class rather than specific classes.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Centralized object creation
\f1\b0  
\f3 \uc0\u8594 
\f1  Makes maintenance and testing easier.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Factory Method Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the 
\f0\b exact type of object to create is determined at runtime
\f1\b0 .\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the 
\f0\b object creation process is complex
\f1\b0  and needs to be encapsulated.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When there are 
\f0\b multiple variations of an object
\f1\b0 , and new variations can be added over time.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the application needs to 
\f0\b reduce dependencies on concrete classes
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2273\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6910\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2273\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6910\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Transport Services
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Create Car, Bike, or Truck dynamically.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2273\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6910\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Database Connections
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Create MySQL, PostgreSQL, or MongoDB connections using a factory.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2273\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6910\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 UI Elements
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Create Buttons, Dropdowns, or Checkboxes in a UI framework.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2273\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6910\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Logging System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Generate different loggers (FileLogger, ConsoleLogger).\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2273\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6910\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Payment Gateways
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Select payment processor (PayPal, Stripe, Razorpay).\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Would you like another 
\f0\b real-world example
\f1\b0 , such as 
\f0\b database connections or payment gateways
\f1\b0 ? 
\f2 \uc0\u55357 \u56960 
\f1 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 \
===========================================================================================\
Abstract Factory Pattern (Detailed Explanation)\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Intent:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 The 
\f0\b Abstract Factory Pattern
\f1\b0  provides an interface for creating families of related or dependent objects 
\f0\b without specifying their concrete classes
\f1\b0 .\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 Why Use Abstract Factory?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To 
\f0\b ensure consistency
\f1\b0  when multiple objects belong to the same family.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To 
\f0\b encapsulate object creation
\f1\b0 , making it easy to swap different implementations.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To 
\f0\b promote loose coupling
\f1\b0 , allowing different concrete factories to create different variants of objects.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine you are designing a 
\f0\b cross-platform UI framework
\f1\b0  that should support both 
\f0\b Windows
\f1\b0  and 
\f0\b MacOS
\f1\b0 . Each platform has different UI components (buttons, checkboxes, text fields, etc.), and you want to create UI elements 
\f0\b without hardcoding platform-specific classes
\f1\b0 .\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 Solution Using Abstract Factory\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Define 
\f0\b abstract product interfaces
\f1\b0  (e.g., 
\f4 Button
\f1 , 
\f4 Checkbox
\f1 ).\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement 
\f0\b concrete product classes
\f1\b0  for each family (e.g., 
\f4 WindowsButton
\f1 , 
\f4 MacOSButton
\f1 ).\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create an 
\f0\b abstract factory interface
\f1\b0  (
\f4 GUIFactory
\f1 ).\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement 
\f0\b concrete factory classes
\f1\b0  (
\f4 WindowsFactory
\f1 , 
\f4 MacOSFactory
\f1 ).\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The client code uses the 
\f0\b factory interface
\f1\b0 , unaware of specific implementations.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define Abstract Product Interfaces
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Abstract product: Button\
interface Button \{\
    void click();\
\}\
\
// Abstract product: Checkbox\
interface Checkbox \{\
    void check();\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Products for Windows
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Concrete product: Windows Button\
class WindowsButton implements Button \{\
    public void click() \{\
        System.out.println("Windows Button Clicked");\
    \}\
\}\
\
// Concrete product: Windows Checkbox\
class WindowsCheckbox implements Checkbox \{\
    public void check() \{\
        System.out.println("Windows Checkbox Checked");\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create Concrete Products for MacOS\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\
\pard\pardeftab720\partightenfactor0

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete product: MacOS Button\
class MacOSButton implements Button \{\
    public void click() \{\
        System.out.println("MacOS Button Clicked");\
    \}\
\}\
\
// Concrete product: MacOS Checkbox\
class MacOSCheckbox implements Checkbox \{\
    public void check() \{\
        System.out.println("MacOS Checkbox Checked");\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Define the Abstract Factory Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\
\pard\pardeftab720\partightenfactor0

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Abstract factory for creating UI components\
interface GUIFactory \{\
    Button createButton();\
    Checkbox createCheckbox();\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Implement Concrete Factories
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Concrete factory: Windows GUI Factory\
class WindowsFactory implements GUIFactory \{\
    public Button createButton() \{\
        return new WindowsButton();\
    \}\
\
    public Checkbox createCheckbox() \{\
        return new WindowsCheckbox();\
    \}\
\}\
\
// Concrete factory: MacOS GUI Factory\
class MacOSFactory implements GUIFactory \{\
    public Button createButton() \{\
        return new MacOSButton();\
    \}\
\
    public Checkbox createCheckbox() \{\
        return new MacOSCheckbox();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 6: Client Code Using Abstract Factory\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
public class AbstractFactoryDemo \{\
    public static void main(String[] args) \{\
        // Select factory based on the platform (e.g., Windows or MacOS)\
        GUIFactory factory;\
\
        // Simulate platform detection\
        String osType = "Windows";  // Change this to "MacOS" for Mac UI\
\
        if (osType.equalsIgnoreCase("Windows")) \{\
            factory = new WindowsFactory();\
        \} else \{\
            factory = new MacOSFactory();\
        \}\
\
        // Use factory to create UI elements\
        Button button = factory.createButton();\
        Checkbox checkbox = factory.createCheckbox();\
\
        // Interact with the products\
        button.click();\
        checkbox.check();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Benefits of Abstract Factory\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Encapsulates Object Creation
\f1\b0 : Clients do not need to know which concrete classes are being used.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Ensures Consistency
\f1\b0 : If a 
\f4 \strokec2 WindowsFactory
\f1 \strokec2  is used, all components will be Windows-specific.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Promotes Loose Coupling
\f1\b0 : New product families (e.g., Linux UI) can be added 
\f0\b without modifying existing code
\f1\b0 .\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use Abstract Factory?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When your system needs to support multiple 
\f0\b families of related objects
\f1\b0 .\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want to ensure that objects 
\f0\b belong to the same family
\f1\b0 .\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the system 
\f0\b should not depend on concrete classes
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ===============================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Builder Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Builder Pattern
\f1\b0  is a creational design pattern that 
\f0\b separates the construction of a complex object from its representation
\f1\b0 . It allows you to create objects 
\f0\b step by step
\f1\b0 , making the process more readable and flexible.\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use Builder Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When an object has 
\f0\b many optional parameters
\f1\b0 .\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the 
\f0\b constructor has too many parameters
\f1\b0 , leading to confusion (the 
\f0\b "telescoping constructor" problem
\f1\b0 ).\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To allow 
\f0\b step-by-step object creation
\f1\b0  with different configurations.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To 
\f0\b make the object immutable
\f1\b0  (by using a 
\f4 Builder
\f1  class).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Scenario:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 Suppose you are designing a 
\f0\b Burger Ordering System
\f1\b0  where a customer can choose:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Bread type
\f1\b0  (White, Brown)\
\ls8\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Meat type
\f1\b0  (Chicken, Beef, Veg)\
\ls8\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Cheese
\f1\b0  (Yes/No)\
\ls8\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Lettuce
\f1\b0  (Yes/No)\
\ls8\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sauce
\f1\b0  (Yes/No)\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 A simple constructor approach would look like this:
\f4 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 class Burger \{\
    private String bread;\
    private String meat;\
    private boolean cheese;\
    private boolean lettuce;\
    private boolean sauce;\
\
    public Burger(String bread, String meat, boolean cheese, boolean lettuce, boolean sauce) \{\
        this.bread = bread;\
        this.meat = meat;\
        this.cheese = cheese;\
        this.lettuce = lettuce;\
        this.sauce = sauce;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \strokec2 However, if a user wants 
\f0\b different combinations
\f1\b0 , we would end up with 
\f0\b multiple constructors
\f1\b0  (telescoping problem).\uc0\u8232 To solve this, we use the 
\f0\b Builder Pattern
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define the Product (Immutable Class)
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 class Burger \{\
    private String bread;\
    private String meat;\
    private boolean cheese;\
    private boolean lettuce;\
    private boolean sauce;\
\
    // Private constructor (only Builder can access it)\
    private Burger(BurgerBuilder builder) \{\
        this.bread = builder.bread;\
        this.meat = builder.meat;\
        this.cheese = builder.cheese;\
        this.lettuce = builder.lettuce;\
        this.sauce = builder.sauce;\
    \}\
\
    public void show() \{\
        System.out.println("Burger with " + bread + ", " + meat + \
            (cheese ? ", Cheese" : "") + \
            (lettuce ? ", Lettuce" : "") + \
            (sauce ? ", Sauce" : ""));\
    \}\
\
    // Step 2: Define the Static Inner Builder Class\
    public static class BurgerBuilder \{\
        private String bread;\
        private String meat;\
        private boolean cheese;\
        private boolean lettuce;\
        private boolean sauce;\
\
        public BurgerBuilder(String bread, String meat) \{ // Mandatory parameters\
            this.bread = bread;\
            this.meat = meat;\
        \}\
\
        public BurgerBuilder addCheese() \{\
            this.cheese = true;\
            return this;\
        \}\
\
        public BurgerBuilder addLettuce() \{\
            this.lettuce = true;\
            return this;\
        \}\
\
        public BurgerBuilder addSauce() \{\
            this.sauce = true;\
            return this;\
        \}\
\
        public Burger build() \{\
            return new Burger(this);\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Using the Builder Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
public class BuilderPatternDemo \{\
    public static void main(String[] args) \{\
        // Creating a burger with cheese and sauce\
        Burger burger1 = new Burger.BurgerBuilder("Brown Bread", "Chicken")\
                            .addCheese()\
                            .addSauce()\
                            .build();\
\
        // Creating another burger with different options\
        Burger burger2 = new Burger.BurgerBuilder("White Bread", "Beef")\
                            .addLettuce()\
                            .build();\
\
        burger1.show();\
        burger2.show();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Output
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Burger with Brown Bread, Chicken, Cheese, Sauce\
Burger with White Bread, Beef, Lettuce\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Advantages of Builder Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Readable & Maintainable
\f1\b0 : No need for long constructors with multiple parameters.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Step-by-step Object Creation
\f1\b0 : You can add only required attributes.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Immutable Object
\f1\b0 : Once built, the object cannot be modified.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Flexible
\f1\b0 : The same process can be used to create different variations.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 When to Use the Builder Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When an object has 
\f0\b many optional fields
\f1\b0 .\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you 
\f0\b want an immutable object
\f1\b0 .\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b constructor overloading
\f1\b0  leads to complexity.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1980\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8280\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1980\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8280\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Complex Objects
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Creating 
\f4 Pizza
\f1 , 
\f4 Burger
\f1 , 
\f4 Car
\f1 , 
\f4 Computer
\f1  objects with different configurations.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1980\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8280\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Immutable Objects
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Creating 
\f4 Person
\f1  objects with optional fields like address, phone number, etc.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1980\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8280\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Fluent APIs
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Used in Java\'92s 
\f4 StringBuilder
\f1 , 
\f4 Stream API
\f1 , and 
\f4 Lombok @Builder
\f1 .\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 ==========================================================================================================\
\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Prototype Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Prototype Pattern
\f1\b0  is a 
\f0\b creational design pattern
\f1\b0  that allows you to 
\f0\b clone objects
\f1\b0  instead of creating new instances from scratch. This helps when object creation is 
\f0\b expensive
\f1\b0  or 
\f0\b complex
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use Prototype Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When object 
\f0\b creation is costly
\f1\b0  (e.g., deep object hierarchies, database operations).\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When we need 
\f0\b to avoid subclassing
\f1\b0  and allow object duplication at runtime.\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When we want 
\f0\b to keep object creation flexible
\f1\b0  without exposing complex logic.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Document Cloning System\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine you have a 
\f0\b document editor
\f1\b0  where users create documents with 
\f0\b different styles, fonts, and formats
\f1\b0 . Instead of 
\f0\b recreating a document from scratch
\f1\b0 , users can duplicate an existing document and modify it.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Prototype Interface
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Prototype Interface\
interface Prototype \{\
    Prototype clone();\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Prototype Classes
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Concrete Prototype: Document\
class Document implements Prototype \{\
    private String title;\
    private String content;\
    private String font;\
\
    public Document(String title, String content, String font) \{\
        this.title = title;\
        this.content = content;\
        this.font = font;\
    \}\
\
    // Implement the clone() method\
    @Override\
    public Document clone() \{\
        return new Document(this.title, this.content, this.font);\
    \}\
\
    public void show() \{\
        System.out.println("Document Title: " + title);\
        System.out.println("Content: " + content);\
        System.out.println("Font: " + font);\
    \}\
\
    // Setters to modify cloned object\
    public void setTitle(String title) \{ this.title = title; \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Using the Prototype Pattern
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 public class PrototypePatternDemo \{\
    public static void main(String[] args) \{\
        // Create an original document\
        Document original = new Document("Project Report", "This is the initial content.", "Arial");\
\
        // Clone the document\
        Document clonedDoc = original.clone();\
        clonedDoc.setTitle("Cloned Report");\
\
        // Display original and cloned documents\
        System.out.println("Original Document:");\
        original.show();\
\
        System.out.println("\\nCloned Document:");\
        clonedDoc.show();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Output:
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Original Document:\
Document Title: Project Report\
Content: This is the initial content.\
Font: Arial\
\
Cloned Document:\
Document Title: Cloned Report\
Content: This is the initial content.\
Font: Arial\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Prototype Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Efficient Object Creation
\f1\b0  
\f3 \uc0\u8594 
\f1  No need to build objects from scratch.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Avoids Repetitive Code
\f1\b0  
\f3 \uc0\u8594 
\f1  Objects can be copied with minimal effort.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Flexibility
\f1\b0  
\f3 \uc0\u8594 
\f1  Easily modify cloned objects without affecting the original.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Reduces Dependency on Subclassing
\f1\b0  
\f3 \uc0\u8594 
\f1  Instead of subclassing, we use cloning.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Prototype Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When object creation is 
\f0\b expensive
\f1\b0  or 
\f0\b time-consuming
\f1\b0 .\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b create many similar objects
\f1\b0  dynamically.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the class has 
\f0\b complex initialization logic
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1806\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5632\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1806\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5632\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Graphic Editors
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Cloning shapes, images, or design templates.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1806\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5632\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Gaming
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Creating multiple enemies or NPCs from a base prototype.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1806\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5632\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Database Queries
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Duplicating result sets without re-executing queries.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1806\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5632\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Network Packets
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Cloning network messages for efficient data transfer.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 =============================================================================================\
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 Structural Patterns\
==================\
\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 A 
\f0\b structural design pattern
\f1\b0  is a type of 
\f0\b design pattern
\f1\b0  that focuses on 
\f0\b how classes and objects are composed to form larger structures
\f1\b0  while ensuring that they work together efficiently.\
These patterns help in 
\f0\b organizing classes and objects
\f1\b0  to provide new functionality 
\f0\b without modifying existing code
\f1\b0 , making the system more 
\f0\b flexible and scalable
\f1\b0 .\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ====================================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Adapter Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Adapter Pattern
\f1\b0  is a 
\f0\b structural design pattern
\f1\b0  that allows 
\f0\b incompatible interfaces
\f1\b0  to work together. It acts as a 
\f0\b bridge
\f1\b0  between two different systems by converting one interface into another that the client expects.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Adapter Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When integrating 
\f0\b legacy code
\f1\b0  with new systems.\
\ls12\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When two interfaces are 
\f0\b incompatible
\f1\b0  but need to work together.\
\ls12\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When we 
\f0\b reuse existing code
\f1\b0  without modifying it.\
\ls12\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When using 
\f0\b third-party libraries
\f1\b0  with different APIs.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Mobile Charger Adapter\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine you have a 
\f0\b mobile phone
\f1\b0  that requires a 
\f0\b Type-C charger
\f1\b0 , but you only have a 
\f0\b Micro-USB charger
\f1\b0 . Instead of buying a new charger, you use a 
\f0\b Micro-USB to Type-C Adapter
\f1\b0  to make it compatible.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define the Target Interface\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 This is the interface that the client expects to work with.\
\pard\pardeftab720\partightenfactor0

\f4 \cf0 \strokec2 \
// Target Interface (Expected by the client)\
interface TypeCCharger \{\
    void chargePhone();\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Define the Adaptee Class (Incompatible Interface)\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 This is the existing class with a different interface that needs to be adapted.\
\pard\pardeftab720\partightenfactor0

\f4 \cf0 \strokec2 \
// Adaptee (Incompatible class)\
class MicroUSBCharger \{\
    public void charge() \{\
        System.out.println("Charging phone using Micro-USB charger.");\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Adapter Class\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 The 
\f0\b adapter
\f1\b0  implements the 
\f0\b target interface
\f1\b0  and internally uses the 
\f0\b adaptee
\f1\b0  to convert the calls.\
\pard\pardeftab720\partightenfactor0

\f4 \cf0 \strokec2 \
// Adapter Class (Bridges the gap between TypeCCharger and MicroUSBCharger)\
class TypeCAdapter implements TypeCCharger \{\
    private MicroUSBCharger microUSBCharger;\
\
    public TypeCAdapter(MicroUSBCharger microUSBCharger) \{\
        this.microUSBCharger = microUSBCharger;\
    \}\
\
    @Override\
    public void chargePhone() \{\
        System.out.println("Adapter converts Type-C request to Micro-USB.");\
        microUSBCharger.charge();  // Call the adaptee's method\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Using the Adapter Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
public class AdapterPatternDemo \{\
    public static void main(String[] args) \{\
        // We have a Micro-USB charger\
        MicroUSBCharger microUSBCharger = new MicroUSBCharger();\
\
        // Using an Adapter to make it work with Type-C\
        TypeCCharger adapter = new TypeCAdapter(microUSBCharger);\
\
        // Client uses Type-C interface\
        adapter.chargePhone();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Output:\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
Adapter converts Type-C request to Micro-USB.\
Charging phone using Micro-USB charger.\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Adapter Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Bridges Incompatible Systems
\f1\b0  
\f3 \uc0\u8594 
\f1  Allows old and new code to work together.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Reusability
\f1\b0  
\f3 \uc0\u8594 
\f1  Uses existing code without modifying it.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Flexibility
\f1\b0  
\f3 \uc0\u8594 
\f1  Works with third-party libraries and external APIs.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Adapter Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b use an existing class but its interface is incompatible
\f1\b0 .\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When integrating 
\f0\b legacy code with new systems
\f1\b0 .\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b converting one type of API to another
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2055\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5508\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2055\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5508\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Hardware Adapters
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 USB-to-HDMI adapters, power plug converters.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2055\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5508\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Software Adapters
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Connecting 
\f0\b old APIs
\f1\b0  to a 
\f0\b new system
\f1\b0 .\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2055\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5508\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Database Wrappers
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adapting SQL queries for 
\f0\b different databases
\f1\b0 .\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2055\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5508\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Game Controllers
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Using 
\f0\b Xbox controllers
\f1\b0  on a 
\f0\b PlayStation
\f1\b0  via an adapter.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 ======================================================================================\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Bridge Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Bridge Pattern
\f1\b0  is a 
\f0\b structural design pattern
\f1\b0  that 
\f0\b decouples an abstraction from its implementation
\f1\b0  so that they can 
\f0\b vary independently
\f1\b0 .\
Instead of creating 
\f0\b tightly coupled classes
\f1\b0 , the Bridge Pattern 
\f0\b separates the abstraction (high-level logic) from the implementation (low-level details)
\f1\b0  using 
\f0\b composition
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Bridge Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Decouples abstraction from implementation
\f1\b0  
\f3 \uc0\u8594 
\f1  Both can evolve independently.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Increases flexibility
\f1\b0  
\f3 \uc0\u8594 
\f1  New features can be added 
\f0\b without modifying existing code
\f1\b0 .\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Avoids class explosion
\f1\b0  
\f3 \uc0\u8594 
\f1  No need for multiple subclasses for every combination.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports open-closed principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Easy to extend functionality.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Remote Control for Different Devices\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine you have a 
\f0\b remote control
\f1\b0  that can be used for 
\f0\b different devices (TV, Radio, Projector, etc.)
\f1\b0 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Without the Bridge Pattern, you would need multiple subclasses for 
\f0\b each device and remote combination
\f1\b0 .\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 With the Bridge Pattern, you can separate 
\f0\b remotes (abstraction)
\f1\b0  and 
\f0\b devices (implementation)
\f1\b0 , making it easier to extend either of them 
\f0\b without modifying the other
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define the Implementation Interface (Bridge Implementor)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 // Implementor Interface (Bridge)\
interface Device \{\
    void turnOn();\
    void turnOff();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \strokec2 This interface represents different 
\f0\b device implementations
\f1\b0  (e.g., TV, Radio, etc.).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Implementations\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Concrete Implementor: TV\
class TV implements Device \{\
    @Override\
    public void turnOn() \{\
        System.out.println("TV is turned ON.");\
    \}\
\
    @Override\
    public void turnOff() \{\
        System.out.println("TV is turned OFF.");\
    \}\
\}\
\
// Concrete Implementor: Radio\
class Radio implements Device \{\
    @Override\
    public void turnOn() \{\
        System.out.println("Radio is turned ON.");\
    \}\
\
    @Override\
    public void turnOff() \{\
        System.out.println("Radio is turned OFF.");\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \strokec2 These are 
\f0\b concrete implementations
\f1\b0  of devices that provide specific functionality.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Define the Abstraction\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Abstraction: Remote Control\
abstract class RemoteControl \{\
    protected Device device; // Composition: Device is used here\
\
    public RemoteControl(Device device) \{\
        this.device = device;\
    \}\
\
    abstract void powerOn();\
    abstract void powerOff();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \strokec2 This is the 
\f0\b abstraction
\f1\b0  that will use the 
\f0\b device implementations
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Create Refined Abstractions\
\pard\pardeftab720\partightenfactor0

\f6\b0 \cf4 \cb5 \strokec4 t
\f4 \cf0 \cb1 \strokec2 \
// Refined Abstraction: Basic Remote\
class BasicRemote extends RemoteControl \{\
    public BasicRemote(Device device) \{\
        super(device);\
    \}\
\
    @Override\
    public void powerOn() \{\
        System.out.print("Basic Remote: ");\
        device.turnOn();\
    \}\
\
    @Override\
    public void powerOff() \{\
        System.out.print("Basic Remote: ");\
        device.turnOff();\
    \}\
\}\
\
// Refined Abstraction: Advanced Remote\
class AdvancedRemote extends RemoteControl \{\
    public AdvancedRemote(Device device) \{\
        super(device);\
    \}\
\
    @Override\
    public void powerOn() \{\
        System.out.print("Advanced Remote: ");\
        device.turnOn();\
    \}\
\
    @Override\
    public void powerOff() \{\
        System.out.print("Advanced Remote: ");\
        device.turnOff();\
    \}\
\
    public void mute() \{\
        System.out.println("Advanced Remote: Muting the device.");\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \strokec2 Here, we define 
\f0\b different types of remotes
\f1\b0  (
\f4 \strokec2 BasicRemote
\f1 \strokec2 , 
\f4 \strokec2 AdvancedRemote
\f1 \strokec2 ) that 
\f0\b work with any device
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Using the Bridge Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
public class BridgePatternDemo \{\
    public static void main(String[] args) \{\
        Device tv = new TV();\
        Device radio = new Radio();\
\
        // Use a basic remote with TV\
        RemoteControl basicRemote = new BasicRemote(tv);\
        basicRemote.powerOn();\
        basicRemote.powerOff();\
\
        System.out.println();\
\
        // Use an advanced remote with Radio\
        AdvancedRemote advancedRemote = new AdvancedRemote(radio);\
        advancedRemote.powerOn();\
        advancedRemote.mute();\
        advancedRemote.powerOff();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output:
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Basic Remote: TV is turned ON.\
Basic Remote: TV is turned OFF.\
\
Advanced Remote: Radio is turned ON.\
Advanced Remote: Muting the device.\
Advanced Remote: Radio is turned OFF.\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Bridge Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Decouples abstraction from implementation
\f1\b0  
\f3 \uc0\u8594 
\f1  Remotes and devices can evolve independently.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Avoids class explosion
\f1\b0  
\f3 \uc0\u8594 
\f1  No need for multiple subclasses for each combination.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Enhances flexibility
\f1\b0  
\f3 \uc0\u8594 
\f1  New devices and remotes can be added easily.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Promotes composition over inheritance
\f1\b0  
\f3 \uc0\u8594 
\f1  More scalable and maintainable.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Bridge Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b you have multiple variations
\f1\b0  of an abstraction and implementation.\
\ls15\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you 
\f0\b want to extend functionality independently
\f1\b0 .\
\ls15\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b subclassing would lead to too many combinations
\f1\b0 .\
\ls15\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b decouple tightly coupled classes
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2086\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6352\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2086\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6352\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Device Controllers
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Remote control for 
\f0\b TVs, radios, projectors
\f1\b0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2086\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6352\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Graphics Rendering
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Abstraction for 
\f0\b different rendering engines (OpenGL, DirectX)
\f1\b0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2086\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6352\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Payment Gateways
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Payment abstraction for 
\f0\b PayPal, Stripe, Razorpay
\f1\b0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2086\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6352\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Messaging Apps
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Messaging abstraction for 
\f0\b SMS, Email, Push Notifications
\f1\b0 \cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
=================================================================================\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Composite Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Composite Pattern
\f1\b0  is a 
\f0\b structural design pattern
\f1\b0  that lets you 
\f0\b treat individual objects and groups of objects (composites) in the same way
\f1\b0 .\
It is used when you have a 
\f0\b hierarchical structure
\f1\b0  (like a tree) and want to 
\f0\b treat both individual elements and groups of elements uniformly
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Composite Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Uniformity
\f1\b0  
\f3 \uc0\u8594 
\f1  Treat individual objects and groups in the same way.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Scalability
\f1\b0  
\f3 \uc0\u8594 
\f1  Easily add new elements or groups without modifying existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Recursive Structure
\f1\b0  
\f3 \uc0\u8594 
\f1  Supports hierarchical structures like 
\f0\b file systems, menus, UI components, etc.
\f1\b0 \uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Reduces Complexity
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients don\'92t need to differentiate between individual objects and collections.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: File System (Folders & Files)\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Consider a 
\f0\b file system
\f1\b0  where:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A 
\f0\b file
\f1\b0  is an individual element.\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A 
\f0\b folder
\f1\b0  can contain files or other folders.\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A folder and a file should be treated 
\f0\b the same way
\f1\b0  (e.g., both have 
\f4 open()
\f1 , 
\f4 delete()
\f1 , etc.).\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 This is a 
\f0\b perfect use case for the Composite Pattern
\f1\b0  because we can 
\f0\b group files and folders together and treat them uniformly
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Component Interface
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Component Interface\
interface FileSystem \{\
    void showDetails();  // Common method for files and folders\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This interface is the 
\f0\b base component
\f1\b0  that both 
\f0\b Files and Folders
\f1\b0  will implement.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Leaf Class (File)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Leaf Class - Represents an individual File\
class File implements FileSystem \{\
    private String name;\
\
    public File(String name) \{\
        this.name = name;\
    \}\
\
    @Override\
    public void showDetails() \{\
        System.out.println("File: " + name);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  A 
\f0\b File is a leaf node
\f1\b0  that 
\f0\b does not contain other objects
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create Composite Class (Folder)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
import java.util.ArrayList;\
import java.util.List;\
\
// Composite Class - Represents a Folder containing files and subfolders\
class Folder implements FileSystem \{\
    private String name;\
    private List<FileSystem> children = new ArrayList<>();\
\
    public Folder(String name) \{\
        this.name = name;\
    \}\
\
    public void add(FileSystem component) \{\
        children.add(component);\
    \}\
\
    @Override\
    public void showDetails() \{\
        System.out.println("Folder: " + name);\
        for (FileSystem child : children) \{\
            child.showDetails(); // Recursively calls showDetails()\
        \}\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  A 
\f0\b Folder is a composite
\f1\b0  
\f3 \uc0\u8594 
\f1  It can contain 
\f0\b files and other folders
\f1\b0 .\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  The 
\f4 \strokec2 showDetails()
\f1 \strokec2  method 
\f0\b recursively calls itself
\f1\b0  for all children.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Test the Composite Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
public class CompositePatternDemo \{\
    public static void main(String[] args) \{\
        // Create Files\
        FileSystem file1 = new File("Document1.txt");\
        FileSystem file2 = new File("Photo.jpg");\
        FileSystem file3 = new File("Video.mp4");\
\
        // Create Folders\
        Folder mainFolder = new Folder("Main Folder");\
        Folder subFolder1 = new Folder("Sub Folder 1");\
\
        // Build the File System Structure\
        subFolder1.add(file1); // Add file to sub-folder\
        mainFolder.add(subFolder1); // Add sub-folder to main folder\
        mainFolder.add(file2); // Add file directly to main folder\
        mainFolder.add(file3);\
\
        // Show Details (Recursive Call)\
        mainFolder.showDetails();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output:
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Folder: Main Folder\
Folder: Sub Folder 1\
File: Document1.txt\
File: Photo.jpg\
File: Video.mp4\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Notice how files and folders are treated the same way
\f1\b0  because they implement the same interface!\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Composite Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Uniformity
\f1\b0  
\f3 \uc0\u8594 
\f1  Treat individual objects (File) and composite objects (Folder) 
\f0\b the same way
\f1\b0 .\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Scalability
\f1\b0  
\f3 \uc0\u8594 
\f1  Add new elements (files or folders) without modifying existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Recursive Structure
\f1\b0  
\f3 \uc0\u8594 
\f1  Ideal for tree-like hierarchies (e.g., 
\f0\b file system, menus, UI components
\f1\b0 ).\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Easy to extend.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Composite Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you have 
\f0\b hierarchical data structures
\f1\b0  like trees.\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b treat single objects and groups the same way
\f1\b0 .\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When working with 
\f0\b nested structures
\f1\b0  (e.g., 
\f0\b file systems, menus, UI elements
\f1\b0 ).\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When using 
\f0\b recursive algorithms
\f1\b0  to process elements.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3336\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4159\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3336\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4159\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 File System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Files & Folders\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3336\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4159\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Menus in a UI
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Main menu, submenus, menu items\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3336\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4159\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Organization Chart
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Employees, Departments, Sub-departments\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3336\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4159\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Graphics System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Shapes, Groups of Shapes\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3336\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4159\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 E-commerce Category Structure
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Categories & Subcategories\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 ============================================================================================\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Decorator Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Decorator Pattern
\f1\b0  is a 
\f0\b structural design pattern
\f1\b0  that 
\f0\b dynamically adds new behavior to objects at runtime
\f1\b0  
\f0\b without modifying their code
\f1\b0 .\
Instead of using 
\f0\b inheritance
\f1\b0 , it uses 
\f0\b composition
\f1\b0  (i.e., wrapping an object inside another object) to extend its behavior.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Decorator Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Adds behavior dynamically
\f1\b0  
\f3 \uc0\u8594 
\f1  No need to modify existing classes.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Avoids class explosion
\f1\b0  
\f3 \uc0\u8594 
\f1  No need to create multiple subclasses.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Extensible without modifying existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b More flexible than inheritance
\f1\b0  
\f3 \uc0\u8594 
\f1  You can stack multiple decorators.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Coffee Shop 
\f2\b0 \uc0\u9749 
\f0\b \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b coffee shop
\f1\b0  where:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can order a 
\f0\b plain coffee
\f1\b0 .\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can add 
\f0\b milk, sugar, or whipped cream
\f1\b0 .\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Each additional ingredient 
\f0\b modifies the cost
\f1\b0  but doesn\'92t change the core coffee.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Instead of creating 
\f0\b different subclasses for every combination
\f1\b0  (e.g., 
\f4 \strokec2 MilkCoffee
\f1 \strokec2 , 
\f4 \strokec2 SugarCoffee
\f1 \strokec2 , 
\f4 \strokec2 MilkSugarCoffee
\f1 \strokec2 ), we can use 
\f0\b decorators
\f1\b0  to dynamically add behavior.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Component Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Component Interface\
interface Coffee \{\
    String getDescription();\
    double getCost();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This is the 
\f0\b base interface
\f1\b0  for all coffee types and decorators.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Concrete Component (Plain Coffee)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Concrete Component (Base Coffee)\
class SimpleCoffee implements Coffee \{\
    @Override\
    public String getDescription() \{\
        return "Simple Coffee";\
    \}\
\
    @Override\
    public double getCost() \{\
        return 5.0; // Base price\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f4 \strokec2 SimpleCoffee
\f1 \strokec2  is a 
\f0\b basic coffee
\f1\b0  without extra ingredients.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Abstract Decorator Class\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Decorator Class (Wraps a Coffee object)\
abstract class CoffeeDecorator implements Coffee \{\
    protected Coffee coffee; // Composition (HAS-A relationship)\
\
    public CoffeeDecorator(Coffee coffee) \{\
        this.coffee = coffee;\
    \}\
\
    @Override\
    public String getDescription() \{\
        return coffee.getDescription(); // Delegates to the wrapped object\
    \}\
\
    @Override\
    public double getCost() \{\
        return coffee.getCost();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This class 
\f0\b wraps a Coffee object
\f1\b0  and delegates method calls to it.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Create Concrete Decorators\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Milk Decorator\
class MilkDecorator extends CoffeeDecorator \{\
    public MilkDecorator(Coffee coffee) \{\
        super(coffee);\
    \}\
\
    @Override\
    public String getDescription() \{\
        return coffee.getDescription() + ", Milk";\
    \}\
\
    @Override\
    public double getCost() \{\
        return coffee.getCost() + 1.5; // Adds cost of milk\
    \}\
\}\
\
// Sugar Decorator\
class SugarDecorator extends CoffeeDecorator \{\
    public SugarDecorator(Coffee coffee) \{\
        super(coffee);\
    \}\
\
    @Override\
    public String getDescription() \{\
        return coffee.getDescription() + ", Sugar";\
    \}\
\
    @Override\
    public double getCost() \{\
        return coffee.getCost() + 0.5; // Adds cost of sugar\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  These decorators 
\f0\b wrap an existing coffee object
\f1\b0  and add 
\f0\b new behavior dynamically
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Test the Decorator Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
public class DecoratorPatternDemo \{\
    public static void main(String[] args) \{\
        // Start with a simple coffee\
        Coffee coffee = new SimpleCoffee();\
        System.out.println(coffee.getDescription() + " | Cost: $" + coffee.getCost());\
\
        // Add Milk\
        coffee = new MilkDecorator(coffee);\
        System.out.println(coffee.getDescription() + " | Cost: $" + coffee.getCost());\
\
        // Add Sugar\
        coffee = new SugarDecorator(coffee);\
        System.out.println(coffee.getDescription() + " | Cost: $" + coffee.getCost());\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output:\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
Simple Coffee | Cost: $5.0\
Simple Coffee, Milk | Cost: $6.5\
Simple Coffee, Milk, Sugar | Cost: $7.0\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b New behaviors (Milk & Sugar) are added dynamically at runtime!
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Decorator Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Dynamically adds behavior
\f1\b0  to objects at runtime.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b More flexible than inheritance
\f1\b0  (No need to create multiple subclasses).\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Stackable decorators
\f1\b0  
\f3 \uc0\u8594 
\f1  Multiple behaviors can be added in different combinations.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Extensible without modifying existing code.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Decorator Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b dynamically add behavior to objects
\f1\b0 .\
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b subclassing leads to too many subclasses
\f1\b0 .\
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want 
\f0\b multiple independent features
\f1\b0  (like toppings in coffee or add-ons in a car).\
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want to follow the 
\f0\b Open/Closed Principle
\f1\b0  (open for extension, closed for modification).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2753\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4689\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2753\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4689\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Coffee Shop
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adding milk, sugar, whipped cream dynamically\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2753\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4689\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Text Editors
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adding bold, italic, underline dynamically\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2753\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4689\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 GUI Components
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adding borders, scrollbars to UI elements\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2753\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4689\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Streaming Services
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adding subtitles, audio tracks, video filters\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2753\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4689\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Weapon Systems in Games
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adding silencers, scopes, extended magazines\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 ==============================================================================================================\
\pard\pardeftab720\qc\partightenfactor0

\f6 \cf4 \strokec4 \
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Facade Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Facade Pattern
\f1\b0  is a 
\f0\b structural design pattern
\f1\b0  that 
\f0\b provides a simplified interface
\f1\b0  to a 
\f0\b complex system of classes, libraries, or APIs
\f1\b0 .\
It 
\f0\b hides
\f1\b0  the complex logic behind a single 
\f0\b higher-level interface
\f1\b0 , making the system easier to use.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Facade Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Simplifies complex systems
\f1\b0  
\f3 \uc0\u8594 
\f1  Provides an easy-to-use interface.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Reduces dependencies
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients interact only with the facade, not with multiple subsystems.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Changes in subsystems do not affect client code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows the Principle of Least Knowledge
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients don\'92t need to know internal details.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Home Theater System 
\f2\b0 \uc0\u55356 \u57260 
\f0\b \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine you have a 
\f0\b home theater system
\f1\b0  with multiple components:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls20\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 TV
\f1\b0 \
\ls20\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Sound System
\f1\b0 \
\ls20\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DVD Player
\f1\b0 \
\ls20\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Streaming Service
\f1\b0 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 To watch a movie, you would need to:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls21\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Turn on the 
\f0\b TV
\f1\b0 \
\ls21\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Turn on the 
\f0\b Sound System
\f1\b0 \
\ls21\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Set the 
\f0\b DVD Player
\f1\b0 \
\ls21\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Adjust the 
\f0\b Volume
\f1\b0 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Instead of controlling each component separately, we can create a 
\f0\b Facade
\f1\b0  that 
\f0\b provides a single "watchMovie()" method to handle everything.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create Subsystem Classes
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Subsystem 1 - TV\
class TV \{\
    void turnOn() \{ System.out.println("TV is turned ON"); \}\
    void turnOff() \{ System.out.println("TV is turned OFF"); \}\
\}\
\
// Subsystem 2 - Sound System\
class SoundSystem \{\
    void turnOn() \{ System.out.println("Sound System is turned ON"); \}\
    void setVolume(int level) \{ System.out.println("Volume set to " + level); \}\
    void turnOff() \{ System.out.println("Sound System is turned OFF"); \}\
\}\
\
// Subsystem 3 - DVD Player\
class DVDPlayer \{\
    void turnOn() \{ System.out.println("DVD Player is turned ON"); \}\
    void play(String movie) \{ System.out.println("Playing movie: " + movie); \}\
    void turnOff() \{ System.out.println("DVD Player is turned OFF"); \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each subsystem class 
\f0\b has its own methods
\f1\b0  that need to be called separately.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Facade Class
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Facade Class - Simplifies interaction with subsystems\
class HomeTheaterFacade \{\
    private TV tv;\
    private SoundSystem soundSystem;\
    private DVDPlayer dvdPlayer;\
\
    public HomeTheaterFacade(TV tv, SoundSystem soundSystem, DVDPlayer dvdPlayer) \{\
        this.tv = tv;\
        this.soundSystem = soundSystem;\
        this.dvdPlayer = dvdPlayer;\
    \}\
\
    public void watchMovie(String movie) \{\
        System.out.println("\\nStarting the Home Theater System...");\
        tv.turnOn();\
        soundSystem.turnOn();\
        soundSystem.setVolume(10);\
        dvdPlayer.turnOn();\
        dvdPlayer.play(movie);\
        System.out.println("Enjoy your movie!\\n");\
    \}\
\
    public void endMovie() \{\
        System.out.println("\\nShutting down the Home Theater System...");\
        dvdPlayer.turnOff();\
        soundSystem.turnOff();\
        tv.turnOff();\
        System.out.println("Goodbye!\\n");\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b Facade
\f1\b0  simplifies the complex process into 
\f0\b two methods
\f1\b0 : 
\f4 \strokec2 watchMovie()
\f1 \strokec2  and 
\f4 \strokec2 endMovie()
\f1 \strokec2 .\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  Instead of calling multiple methods on different objects, the client calls just 
\f0\b one method
\f1\b0  on the 
\f0\b Facade
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Test the Facade Pattern
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 public class FacadePatternDemo \{\
    public static void main(String[] args) \{\
        // Create Subsystem Components\
        TV tv = new TV();\
        SoundSystem soundSystem = new SoundSystem();\
        DVDPlayer dvdPlayer = new DVDPlayer();\
\
        // Create Facade\
        HomeTheaterFacade homeTheater = new HomeTheaterFacade(tv, soundSystem, dvdPlayer);\
\
        // Use Facade to watch and end a movie\
        homeTheater.watchMovie("Inception");\
        homeTheater.endMovie();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output:
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Starting the Home Theater System...\
TV is turned ON\
Sound System is turned ON\
Volume set to 10\
DVD Player is turned ON\
Playing movie: Inception\
Enjoy your movie!\
\
Shutting down the Home Theater System...\
DVD Player is turned OFF\
Sound System is turned OFF\
TV is turned OFF\
Goodbye!\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Notice how the client interacts only with 
\f5 \strokec2 HomeTheaterFacade
\f1\b0 \strokec2 , instead of calling multiple methods on different objects.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Facade Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Simplifies client interaction
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients call a 
\f0\b single method
\f1\b0  instead of multiple methods.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Decouples client from subsystems
\f1\b0  
\f3 \uc0\u8594 
\f1  Subsystem classes can change without affecting clients.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Changes to subsystems don\'92t impact client code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates complexity
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients don\'92t need to understand subsystem details.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Facade Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls22\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you have 
\f0\b a complex system
\f1\b0  that should be 
\f0\b easy to use
\f1\b0 .\
\ls22\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want to 
\f0\b decouple clients from internal system components
\f1\b0 .\
\ls22\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b provide a unified interface
\f1\b0  for multiple related classes.\
\ls22\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want to follow the 
\f0\b Principle of Least Knowledge
\f1\b0  (clients should know only what they need).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2599\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6256\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2599\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6256\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Home Theater System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 TV, Speakers, DVD Player, Streaming Service\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2599\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6256\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Banking System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Facade for Account Management, Transactions, Loan Processing\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2599\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6256\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 E-commerce System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Facade for Orders, Payments, Shipping, Notifications\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2599\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6256\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Logging System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Facade for Writing Logs to File, Database, Console\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2599\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6256\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Smart Home Automation
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Facade for Lights, Thermostat, Security System\cell \lastrow\row
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 =====================================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Flyweight Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Flyweight Pattern
\f1\b0  is a 
\f0\b structural design pattern
\f1\b0  that 
\f0\b reduces memory usage by sharing common objects instead of creating multiple instances
\f1\b0 .\
It is 
\f0\b useful when a program needs to create a large number of objects
\f1\b0  that have 
\f0\b similar properties
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Flyweight Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Reduces memory usage
\f1\b0  
\f3 \uc0\u8594 
\f1  Reuses shared objects instead of creating new ones.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves performance
\f1\b0  
\f3 \uc0\u8594 
\f1  Less object creation = faster execution.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Great for large-scale systems
\f1\b0  
\f3 \uc0\u8594 
\f1  Works well in graphics, text processing, and caching scenarios.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Text Editor (Character Objects)\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b text editor
\f1\b0  like Microsoft Word.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls23\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Each 
\f0\b character
\f1\b0  (A, B, C, etc.) has a 
\f0\b font, color, and style
\f1\b0 .\
\ls23\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Instead of creating 
\f0\b separate objects for every character
\f1\b0 , we can 
\f0\b reuse
\f1\b0  objects for each letter 
\f0\b A, B, C
\f1\b0  while storing their positions separately.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Flyweight Interface
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Flyweight Interface (Common properties for shared objects)\
interface Character \{\
    void display(int x, int y);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This interface represents the 
\f0\b intrinsic state
\f1\b0  (shared data) of objects.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Concrete Flyweight Class
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Concrete Flyweight Class (Shared Character Object)\
class ConcreteCharacter implements Character \{\
    private char letter; // Shared property (intrinsic state)\
\
    public ConcreteCharacter(char letter) \{\
        this.letter = letter;\
    \}\
\
    @Override\
    public void display(int x, int y) \{\
        System.out.println("Character: " + letter + " displayed at (" + x + ", " + y + ")");\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f4 \strokec2 letter
\f1 \strokec2  is 
\f0\b intrinsic
\f1\b0  (shared among all objects).\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f4 \strokec2 x
\f1 \strokec2  and 
\f4 \strokec2 y
\f1 \strokec2  are 
\f0\b extrinsic
\f1\b0  (unique to each instance).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Flyweight Factory\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
import java.util.HashMap;\
import java.util.Map;\
\
// Flyweight Factory (Manages shared Character objects)\
class CharacterFactory \{\
    private Map<Character, ConcreteCharacter> characterMap = new HashMap<>();\
\
    public Character getCharacter(char letter) \{\
        // Check if the character already exists\
        if (!characterMap.containsKey(letter)) \{\
            characterMap.put(letter, new ConcreteCharacter(letter));\
            System.out.println("Created new character object for: " + letter);\
        \}\
        return characterMap.get(letter);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The factory 
\f0\b ensures that each character object is created only once and reused
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Test the Flyweight Pattern
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 public class FlyweightPatternDemo \{\
    public static void main(String[] args) \{\
        CharacterFactory factory = new CharacterFactory();\
\
        // Use shared objects\
        Character c1 = factory.getCharacter('A');\
        c1.display(10, 20);\
\
        Character c2 = factory.getCharacter('B');\
        c2.display(30, 40);\
\
        Character c3 = factory.getCharacter('A'); // Reuses existing 'A'\
        c3.display(50, 60);\
\
        Character c4 = factory.getCharacter('B'); // Reuses existing 'B'\
        c4.display(70, 80);\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output:
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Created new character object for: A\
Character: A displayed at (10, 20)\
Created new character object for: B\
Character: B displayed at (30, 40)\
Character: A displayed at (50, 60)\
Character: B displayed at (70, 80)\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Objects for 'A' and 'B' are created only once and reused!
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Flyweight Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Reduces memory usage
\f1\b0  
\f3 \uc0\u8594 
\f1  Fewer objects are created.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves performance
\f1\b0  
\f3 \uc0\u8594 
\f1  Less object creation = faster execution.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Great for large-scale systems
\f1\b0  
\f3 \uc0\u8594 
\f1  Works well in graphics, caching, and text processing.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Flyweight Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls24\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need 
\f0\b a large number of similar objects
\f1\b0 .\
\ls24\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When objects have 
\f0\b common properties
\f1\b0  that can be shared.\
\ls24\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When memory usage is 
\f0\b a critical factor
\f1\b0 .\
\ls24\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When object creation is 
\f0\b expensive
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3013\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5418\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3013\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5418\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Text Editor
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Reuses character objects instead of creating new ones.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3013\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5418\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Game Development
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Uses shared tree or enemy objects in open-world games.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3013\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5418\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Image Processing
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Reuses pixels instead of creating new ones.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3013\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5418\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Database Connection Pooling
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Manages shared database connections.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3013\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5418\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Caching Systems
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Stores and reuses frequently used objects.\cell \lastrow\row
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ===============================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Proxy Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Proxy Pattern
\f1\b0  is a 
\f0\b structural design pattern
\f1\b0  that 
\f0\b acts as a substitute or placeholder
\f1\b0  for another object.\
A proxy 
\f0\b controls access
\f1\b0  to the real object by adding additional behavior like 
\f0\b lazy initialization, access control, logging, or performance optimizations
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Proxy Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Controls access
\f1\b0  
\f3 \uc0\u8594 
\f1  Can restrict or manage access to sensitive resources.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Enhances performance
\f1\b0  
\f3 \uc0\u8594 
\f1  Can defer object creation until necessary (lazy loading).\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Adds extra functionalities
\f1\b0  
\f3 \uc0\u8594 
\f1  Can introduce logging, caching, and security without modifying the real object.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Protects objects
\f1\b0  
\f3 \uc0\u8594 
\f1  Prevents direct access to the real object.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Types of Proxy Patterns\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6937\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Type\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Purpose\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6937\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Virtual Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Delays object creation until it's needed (lazy initialization).\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6937\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Protection Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Controls access based on permissions.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6937\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Remote Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Provides a local representation of an object located in another system.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6937\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Smart Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adds extra functionalities like logging, reference counting, and caching.\cell \lastrow\row
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Image Loading (Virtual Proxy)\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b photo viewer app
\f1\b0  that loads 
\f0\b high-resolution images
\f1\b0 . Instead of loading all images at once, we use a 
\f0\b proxy
\f1\b0  that loads them 
\f0\b only when needed
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Subject Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Subject Interface\
interface Image \{\
    void display();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This interface represents the 
\f0\b common operations
\f1\b0  for the real and proxy objects.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Real Object\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Real Object (Actual Image that takes time to load)\
class RealImage implements Image \{\
    private String filename;\
\
    public RealImage(String filename) \{\
        this.filename = filename;\
        loadFromDisk();\
    \}\
\
    private void loadFromDisk() \{\
        System.out.println("Loading image from disk: " + filename);\
    \}\
\
    @Override\
    public void display() \{\
        System.out.println("Displaying image: " + filename);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b RealImage
\f1\b0  class represents the actual object.\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  It 
\f0\b loads an image from disk
\f1\b0 , which is a costly operation.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Proxy Class\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Proxy Class (Controls access to RealImage)\
class ProxyImage implements Image \{\
    private RealImage realImage;\
    private String filename;\
\
    public ProxyImage(String filename) \{\
        this.filename = filename;\
    \}\
\
    @Override\
    public void display() \{\
        // Lazy initialization - Load image only when needed\
        if (realImage == null) \{\
            realImage = new RealImage(filename);\
        \}\
        realImage.display();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b ProxyImage
\f1\b0  class 
\f0\b delays loading
\f1\b0  of the real image until it's needed.\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f0\b If the image is not loaded, it initializes it; otherwise, it reuses the existing object.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Test the Proxy Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class ProxyPatternDemo \{\
    public static void main(String[] args) \{\
        Image image1 = new ProxyImage("photo1.jpg");\
        Image image2 = new ProxyImage("photo2.jpg");\
\
        // Image is loaded only when display() is called\
        System.out.println("First time displaying photo1:");\
        image1.display();\
\
        System.out.println("\\nSecond time displaying photo1:");\
        image1.display(); // Does not load again\
\
        System.out.println("\\nDisplaying photo2:");\
        image2.display();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output:\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 yaml\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
First time displaying photo1:\
Loading image from disk: photo1.jpg\
Displaying image: photo1.jpg\
\
Second time displaying photo1:\
Displaying image: photo1.jpg\
\
Displaying photo2:\
Loading image from disk: photo2.jpg\
Displaying image: photo2.jpg\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Notice how the image is loaded from disk only once!
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Proxy Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Lazy Initialization
\f1\b0  
\f3 \uc0\u8594 
\f1  Objects are created only when needed.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Security & Access Control
\f1\b0  
\f3 \uc0\u8594 
\f1  Proxies can restrict access based on permissions.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Performance Optimization
\f1\b0  
\f3 \uc0\u8594 
\f1  Proxies can reduce memory usage by delaying or caching object creation.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Logging & Monitoring
\f1\b0  
\f3 \uc0\u8594 
\f1  Proxies can log access and operations on real objects.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Proxy Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls25\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want to 
\f0\b control access
\f1\b0  to an object.\
\ls25\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the 
\f0\b real object is resource-intensive
\f1\b0  and should be 
\f0\b created only when needed
\f1\b0 .\
\ls25\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need 
\f0\b security, logging, or monitoring
\f1\b0  for an object.\
\ls25\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When working with 
\f0\b remote objects
\f1\b0  (e.g., accessing a web service).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8217\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8217\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Virtual Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Loading high-resolution images only when viewed.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8217\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Protection Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Restricting access to certain resources based on user roles.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8217\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Remote Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 A local representation of an object in another system (e.g., accessing a cloud service).\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1730\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth8217\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Smart Proxy
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Adding logging, caching, or security checks before calling the real object.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ============================================================================================\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Behavioral Design Patterns (Detailed Explanation)\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 What are Behavioral Patterns?\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 Behavioral design patterns 
\f0\b focus on how objects interact and communicate with each other
\f1\b0  while ensuring 
\f0\b loose coupling
\f1\b0  and 
\f0\b scalability
\f1\b0  of the system.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 Why Use Behavioral Patterns?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Improves communication
\f1\b0  between objects.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Reduces dependencies
\f1\b0  between classes.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Promotes flexibility
\f1\b0  and 
\f0\b reusability
\f1\b0 .\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Enhances maintainability
\f1\b0  by defining 
\f0\b clear roles and responsibilities
\f1\b0 .\
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ==============================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Chain of Responsibility Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Chain of Responsibility (CoR) Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that allows multiple objects to process a request 
\f0\b sequentially
\f1\b0  until one of them handles it.\
This pattern helps 
\f0\b avoid tight coupling
\f1\b0  between the sender and receiver by passing requests along a chain of handlers.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Chain of Responsibility Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Decouples sender and receiver
\f1\b0  
\f3 \uc0\u8594 
\f1  The sender doesn\'92t need to know which object will handle the request.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Flexible and extensible
\f1\b0  
\f3 \uc0\u8594 
\f1  You can modify the chain dynamically at runtime.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Easy to add or remove handlers without modifying the existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports multiple handlers
\f1\b0  
\f3 \uc0\u8594 
\f1  Each handler gets a chance to process the request.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Technical Support System\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b customer support system
\f1\b0  where users submit issues:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls26\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Level 1 Support
\f1\b0  
\f3 \uc0\u8594 
\f1  Handles basic inquiries.\
\ls26\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Level 2 Support
\f1\b0  
\f3 \uc0\u8594 
\f1  Handles complex issues.\
\ls26\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Level 3 Support
\f1\b0  
\f3 \uc0\u8594 
\f1  Escalates critical problems to experts.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 A 
\f0\b request is passed through the chain
\f1\b0  until a suitable handler is found.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Handler Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Handler Interface\
abstract class SupportHandler \{\
    protected SupportHandler nextHandler; // Next handler in the chain\
\
    public void setNextHandler(SupportHandler nextHandler) \{\
        this.nextHandler = nextHandler;\
    \}\
\
    public abstract void handleRequest(String request);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This interface defines 
\f0\b a method to handle requests
\f1\b0  and a 
\f0\b reference to the next handler
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Handlers\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Level 1 Support\
class Level1Support extends SupportHandler \{\
    @Override\
    public void handleRequest(String request) \{\
        if (request.equals("Basic Issue")) \{\
            System.out.println("Level 1 Support: Handling basic issue.");\
        \} else if (nextHandler != null) \{\
            nextHandler.handleRequest(request); // Pass to the next handler\
        \}\
    \}\
\}\
\
// Level 2 Support\
class Level2Support extends SupportHandler \{\
    @Override\
    public void handleRequest(String request) \{\
        if (request.equals("Complex Issue")) \{\
            System.out.println("Level 2 Support: Handling complex issue.");\
        \} else if (nextHandler != null) \{\
            nextHandler.handleRequest(request);\
        \}\
    \}\
\}\
\
// Level 3 Support\
class Level3Support extends SupportHandler \{\
    @Override\
    public void handleRequest(String request) \{\
        if (request.equals("Critical Issue")) \{\
            System.out.println("Level 3 Support: Handling critical issue.");\
        \} else \{\
            System.out.println("No handler found for the issue.");\
        \}\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each handler 
\f0\b checks if it can handle the request
\f1\b0 ; otherwise, it 
\f0\b forwards it to the next handler
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Build the Chain and Test\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class ChainOfResponsibilityDemo \{\
    public static void main(String[] args) \{\
        // Create handlers\
        SupportHandler level1 = new Level1Support();\
        SupportHandler level2 = new Level2Support();\
        SupportHandler level3 = new Level3Support();\
\
        // Set up the chain\
        level1.setNextHandler(level2);\
        level2.setNextHandler(level3);\
\
        // Test requests\
        System.out.println("Sending 'Basic Issue':");\
        level1.handleRequest("Basic Issue");\
\
        System.out.println("\\nSending 'Complex Issue':");\
        level1.handleRequest("Complex Issue");\
\
        System.out.println("\\nSending 'Critical Issue':");\
        level1.handleRequest("Critical Issue");\
\
        System.out.println("\\nSending 'Unknown Issue':");\
        level1.handleRequest("Unknown Issue");\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 pgsql\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Sending 'Basic Issue':\
Level 1 Support: Handling basic issue.\
\
Sending 'Complex Issue':\
Level 2 Support: Handling complex issue.\
\
Sending 'Critical Issue':\
Level 3 Support: Handling critical issue.\
\
Sending 'Unknown Issue':\
No handler found for the issue.\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b The request is passed through the chain until a handler processes it!
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Chain of Responsibility Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Decouples sender and receiver
\f1\b0  
\f3 \uc0\u8594 
\f1  The sender doesn\'92t need to know which handler will process the request.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports multiple handlers
\f1\b0  
\f3 \uc0\u8594 
\f1  Each handler gets a chance to process the request.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Flexible & extensible
\f1\b0  
\f3 \uc0\u8594 
\f1  You can modify the chain dynamically.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Promotes cleaner code
\f1\b0  
\f3 \uc0\u8594 
\f1  Avoids large if-else conditions.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Chain of Responsibility Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls27\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When multiple handlers can process a request, but the exact handler is unknown.\
\ls27\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When requests should be 
\f0\b passed dynamically
\f1\b0  along a chain.\
\ls27\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want to 
\f0\b avoid hardcoding
\f1\b0  conditional logic (e.g., large if-else or switch-case statements).\
\ls27\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When the system should be 
\f0\b easily extendable
\f1\b0  to add new handlers.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3473\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6707\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3473\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6707\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Technical Support System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Escalates issues from basic to expert levels.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3473\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6707\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Logging Frameworks
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Logs messages at different severity levels (INFO, DEBUG, ERROR).\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3473\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6707\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Event Handling (UI Frameworks)
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Passes UI events from parent to child elements.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3473\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6707\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Authorization Filters
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Passes user requests through authentication and permission checks.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ======================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Command Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Command Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that encapsulates a request as an object, thereby allowing:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls28\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Parameterization of requests.\
\ls28\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Queuing of requests.\
\ls28\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Logging and undoing of operations.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Command Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Decouples sender and receiver
\f1\b0  
\f3 \uc0\u8594 
\f1  The object making the request does not need to know how it will be executed.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports undo/redo operations
\f1\b0  
\f3 \uc0\u8594 
\f1  Since requests are encapsulated as objects, they can be stored and reversed.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Allows queuing and logging
\f1\b0  
\f3 \uc0\u8594 
\f1  Requests can be scheduled or logged for auditing.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Promotes extensibility
\f1\b0  
\f3 \uc0\u8594 
\f1  Adding new commands is easy without modifying existing code.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Remote Control System\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b universal remote control
\f1\b0  that can turn devices ON or OFF (TV, AC, Lights).\uc0\u8232 Instead of the 
\f0\b remote directly invoking device methods
\f1\b0 , we use the 
\f0\b Command Pattern
\f1\b0  to encapsulate actions.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define the Command Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Command Interface\
interface Command \{\
    void execute();\
    void undo();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This interface declares the 
\f0\b execute()
\f1\b0  method to perform an action and 
\f0\b undo()
\f1\b0  to reverse it.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Command Classes\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Receiver: Light (The actual object that performs an action)\
class Light \{\
    public void turnOn() \{\
        System.out.println("Light is ON");\
    \}\
\
    public void turnOff() \{\
        System.out.println("Light is OFF");\
    \}\
\}\
\
// Concrete Command: Turn ON Light\
class LightOnCommand implements Command \{\
    private Light light;\
\
    public LightOnCommand(Light light) \{\
        this.light = light;\
    \}\
\
    @Override\
    public void execute() \{\
        light.turnOn();\
    \}\
\
    @Override\
    public void undo() \{\
        light.turnOff();\
    \}\
\}\
\
// Concrete Command: Turn OFF Light\
class LightOffCommand implements Command \{\
    private Light light;\
\
    public LightOffCommand(Light light) \{\
        this.light = light;\
    \}\
\
    @Override\
    public void execute() \{\
        light.turnOff();\
    \}\
\
    @Override\
    public void undo() \{\
        light.turnOn();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each command class encapsulates a 
\f0\b specific operation
\f1\b0  (turn on/off the light).\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  The 
\f0\b undo()
\f1\b0  method reverses the action.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Invoker (Remote Control)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Invoker: Remote Control\
class RemoteControl \{\
    private Command command;\
\
    public void setCommand(Command command) \{\
        this.command = command;\
    \}\
\
    public void pressButton() \{\
        command.execute();\
    \}\
\
    public void pressUndo() \{\
        command.undo();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b RemoteControl (Invoker)
\f1\b0  stores a command and triggers it when a button is pressed.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Test the Command Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class CommandPatternDemo \{\
    public static void main(String[] args) \{\
        // Create the receiver (Light)\
        Light light = new Light();\
\
        // Create command objects\
        Command lightOn = new LightOnCommand(light);\
        Command lightOff = new LightOffCommand(light);\
\
        // Create the invoker (Remote Control)\
        RemoteControl remote = new RemoteControl();\
\
        // Turn on the light\
        remote.setCommand(lightOn);\
        System.out.println("Pressing ON button:");\
        remote.pressButton();\
\
        // Undo action (turn off the light)\
        System.out.println("\\nPressing UNDO button:");\
        remote.pressUndo();\
\
        // Turn off the light\
        remote.setCommand(lightOff);\
        System.out.println("\\nPressing OFF button:");\
        remote.pressButton();\
\
        // Undo action (turn on the light)\
        System.out.println("\\nPressing UNDO button:");\
        remote.pressUndo();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 vbnet\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Pressing ON button:\
Light is ON\
\
Pressing UNDO button:\
Light is OFF\
\
Pressing OFF button:\
Light is OFF\
\
Pressing UNDO button:\
Light is ON\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b The remote control sends commands without knowing how they are implemented.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Command Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Decouples sender and receiver
\f1\b0  
\f3 \uc0\u8594 
\f1  The Invoker does not directly interact with the Receiver.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports Undo/Redo
\f1\b0  
\f3 \uc0\u8594 
\f1  Since commands are objects, actions can be reversed easily.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates requests
\f1\b0  
\f3 \uc0\u8594 
\f1  Commands can be stored, queued, and executed later.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Extensible
\f1\b0  
\f3 \uc0\u8594 
\f1  Adding new commands is easy without modifying existing code.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Command Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls29\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b parameterize objects with actions
\f1\b0  (e.g., GUI buttons, menu items).\
\ls29\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want to 
\f0\b queue requests and execute them later
\f1\b0  (e.g., task scheduling).\
\ls29\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When implementing 
\f0\b Undo/Redo functionality
\f1\b0  (e.g., text editors, games).\
\ls29\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When logging 
\f0\b changes for auditing
\f1\b0  (e.g., transactions in banking).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2435\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5839\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2435\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5839\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Remote Control System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Turning devices ON/OFF without direct interaction.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2435\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5839\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Text Editor Undo/Redo
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Storing commands for undoing typing, copying, and pasting.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2435\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5839\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Task Scheduling
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Queuing commands for execution at a later time.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2435\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5839\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Transaction Processing
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Logging commands for auditing and rollback.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 =============================================================================================\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Interpreter Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Interpreter Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  used to define a 
\f0\b grammar
\f1\b0  for a language and provide an interpreter to process sentences in that language.\
It is useful when you need to interpret expressions, scripts, or languages dynamically.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Interpreter Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Defines a language syntax
\f1\b0  
\f3 \uc0\u8594 
\f1  Helps create a custom language or DSL (Domain-Specific Language).\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Easy to extend
\f1\b0  
\f3 \uc0\u8594 
\f1  New rules can be added without modifying existing logic.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates logic
\f1\b0  
\f3 \uc0\u8594 
\f1  Separates interpretation logic from the client.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Useful for compilers, parsers, and scripting languages.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Simple Math Expression Interpreter\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Let\'92s build an 
\f0\b Interpreter
\f1\b0  that evaluates simple math expressions like:\
\pard\pardeftab720\partightenfactor0

\f4 \cf0 \strokec2 5 + 3 - 2\
\pard\pardeftab720\sa240\partightenfactor0

\f1 \cf0 \strokec2 We define an 
\f0\b abstract expression
\f1\b0 , then create 
\f0\b terminal and non-terminal expressions
\f1\b0  to handle numbers and operations.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define the Expression Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Abstract Expression Interface\
interface Expression \{\
    int interpret();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Every expression 
\f0\b must implement the 
\f5 \strokec2 interpret()
\f0 \strokec2  method
\f1\b0  to return a result.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Terminal Expressions (Numbers)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Terminal Expression (Numbers)\
class NumberExpression implements Expression \{\
    private int number;\
\
    public NumberExpression(int number) \{\
        this.number = number;\
    \}\
\
    @Override\
    public int interpret() \{\
        return number;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Numbers are terminal expressions
\f1\b0  since they 
\f0\b do not need further interpretation
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create Non-Terminal Expressions (Operations)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Non-Terminal Expression (Addition)\
class AddExpression implements Expression \{\
    private Expression leftExpression;\
    private Expression rightExpression;\
\
    public AddExpression(Expression leftExpression, Expression rightExpression) \{\
        this.leftExpression = leftExpression;\
        this.rightExpression = rightExpression;\
    \}\
\
    @Override\
    public int interpret() \{\
        return leftExpression.interpret() + rightExpression.interpret();\
    \}\
\}\
\
// Non-Terminal Expression (Subtraction)\
class SubtractExpression implements Expression \{\
    private Expression leftExpression;\
    private Expression rightExpression;\
\
    public SubtractExpression(Expression leftExpression, Expression rightExpression) \{\
        this.leftExpression = leftExpression;\
        this.rightExpression = rightExpression;\
    \}\
\
    @Override\
    public int interpret() \{\
        return leftExpression.interpret() - rightExpression.interpret();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Addition and Subtraction expressions
\f1\b0  take two expressions, interpret them, and apply the operation.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Build and Evaluate Expressions\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class InterpreterPatternDemo \{\
    public static void main(String[] args) \{\
        // Expression: 5 + 3 - 2\
        Expression num1 = new NumberExpression(5);\
        Expression num2 = new NumberExpression(3);\
        Expression num3 = new NumberExpression(2);\
\
        // 5 + 3\
        Expression add = new AddExpression(num1, num2);\
        // (5 + 3) - 2\
        Expression subtract = new SubtractExpression(add, num3);\
\
        // Interpret and evaluate the final expression\
        System.out.println("Result: " + subtract.interpret()); // Output: 6\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 makefile\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Result: 6\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b The interpreter processes the math expression by evaluating it step by step.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Interpreter Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Defines and processes languages easily
\f1\b0  
\f3 \uc0\u8594 
\f1  Ideal for parsing languages.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates logic
\f1\b0  
\f3 \uc0\u8594 
\f1  Each expression class focuses on a single operation.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Highly extensible
\f1\b0  
\f3 \uc0\u8594 
\f1  New expressions can be added without modifying existing logic.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Interpreter Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls30\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b interpret domain-specific languages (DSLs)
\f1\b0 .\
\ls30\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b parse and evaluate expressions dynamically
\f1\b0 .\
\ls30\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When dealing with 
\f0\b compilers, scripting engines, and configuration file parsing
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4038\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5456\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4038\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5456\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Math Expression Evaluators
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Interprets and calculates expressions like 
\f4 5 + 3 * 2
\f1 .\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4038\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5456\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 SQL Query Interpreters
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Parses and executes SQL commands.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4038\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5456\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Regular Expression (Regex) Evaluators
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Matches patterns against text.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4038\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5456\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Programming Language Compilers
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Parses source code and generates bytecode.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
===========================================================================================================================\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Iterator Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Iterator Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that provides a way to access elements of a collection 
\f0\b sequentially
\f1\b0  without exposing its underlying representation.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Iterator Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Encapsulates iteration logic
\f1\b0  
\f3 \uc0\u8594 
\f1  The client does not need to know how traversal works.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Decouples collection from traversal
\f1\b0  
\f3 \uc0\u8594 
\f1  The same iterator can be used for different data structures.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports multiple traversals
\f1\b0  
\f3 \uc0\u8594 
\f1  You can have different iterators for different traversal strategies.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Simplifies client code
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients don\'92t need to manage iteration logic manually.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: TV Channel Iterator\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b TV remote control
\f1\b0  that allows users to browse channels 
\f0\b one by one
\f1\b0  without needing to know how they are stored.\
The 
\f0\b Iterator Pattern
\f1\b0  lets us create an iterator that sequentially accesses TV channels.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Iterator Interface
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Iterator Interface\
interface Iterator \{\
    boolean hasNext();\
    Object next();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b Iterator interface
\f1\b0  defines two key methods:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls31\ilvl0
\f5\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 hasNext()
\f1\b0  
\f3 \uc0\u8594 
\f1  Checks if there are more elements.\
\ls31\ilvl0
\f5\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 next()
\f1\b0  
\f3 \uc0\u8594 
\f1  Returns the next element in the collection.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Collection Interface
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Collection Interface\
interface ChannelCollection \{\
    Iterator createIterator();\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b Collection interface
\f1\b0  defines a method to create an iterator.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Concrete Collection
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 import java.util.ArrayList;\
import java.util.List;\
\
// Concrete Collection: TV Channel Collection\
class TVChannelCollection implements ChannelCollection \{\
    private List<String> channels = new ArrayList<>();\
\
    public void addChannel(String channel) \{\
        channels.add(channel);\
    \}\
\
    @Override\
    public Iterator createIterator() \{\
        return new TVChannelIterator(channels);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Stores channels
\f1\b0  in a list and provides an iterator for traversal.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Create the Concrete Iterator
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Concrete Iterator: TV Channel Iterator\
class TVChannelIterator implements Iterator \{\
    private List<String> channels;\
    private int position = 0;\
\
    public TVChannelIterator(List<String> channels) \{\
        this.channels = channels;\
    \}\
\
    @Override\
    public boolean hasNext() \{\
        return position < channels.size();\
    \}\
\
    @Override\
    public Object next() \{\
        if (this.hasNext()) \{\
            return channels.get(position++);\
        \}\
        return null;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b TVChannelIterator
\f1\b0  iterates through the list of channels 
\f0\b without exposing its internal structure
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Test the Iterator Pattern
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 public class IteratorPatternDemo \{\
    public static void main(String[] args) \{\
        TVChannelCollection channelCollection = new TVChannelCollection();\
        channelCollection.addChannel("CNN");\
        channelCollection.addChannel("BBC");\
        channelCollection.addChannel("Discovery");\
\
        Iterator channelIterator = channelCollection.createIterator();\
\
        System.out.println("Browsing TV Channels:");\
        while (channelIterator.hasNext()) \{\
            System.out.println("Watching: " + channelIterator.next());\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Browsing TV Channels:\
Watching: CNN\
Watching: BBC\
Watching: Discovery\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b The client code accesses channels without knowing their internal storage structure.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Iterator Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Encapsulates iteration logic
\f1\b0  
\f3 \uc0\u8594 
\f1  Clients don\'92t need to manage indexes or loops manually.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Decouples data structure from traversal
\f1\b0  
\f3 \uc0\u8594 
\f1  You can change the underlying collection without affecting iteration logic.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports multiple traversal strategies
\f1\b0  
\f3 \uc0\u8594 
\f1  You can implement different iterators (e.g., reverse iteration, filtering).\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Iterator Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls32\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need 
\f0\b sequential access
\f1\b0  to a collection 
\f0\b without exposing
\f1\b0  its structure.\
\ls32\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When multiple clients need different 
\f0\b ways of iterating
\f1\b0  over the same data.\
\ls32\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you want 
\f0\b consistent iteration across different collections
\f1\b0  (e.g., lists, trees, graphs).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4096\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4096\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 TV Remote Control
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Browsing TV channels sequentially.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4096\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Social Media Feed
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Iterating over posts in a news feed.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4096\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Database Result Set
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Iterating through rows in a database query.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4096\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 File System Navigation
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Iterating through files in a directory.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
=============================================================================================\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Mediator Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Mediator Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that defines an object (
\f0\b mediator
\f1\b0 ) to encapsulate how a set of objects interact. It promotes 
\f0\b loose coupling
\f1\b0  by preventing direct communication between objects, forcing them to communicate via a mediator.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Mediator Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Reduces direct dependencies
\f1\b0  
\f3 \uc0\u8594 
\f1  Objects don\'92t talk to each other directly, reducing tight coupling.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Centralized control
\f1\b0  
\f3 \uc0\u8594 
\f1  The mediator manages complex interactions in one place.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Adding new components does not require modifying existing ones.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Better communication management
\f1\b0  
\f3 \uc0\u8594 
\f1  Useful for chat applications, air traffic control, etc.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Air Traffic Control System\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine an 
\f0\b air traffic control (ATC) system
\f1\b0  where multiple aircraft communicate with each other.\
Instead of planes talking 
\f0\b directly
\f1\b0  to each other (which can be chaotic), they 
\f0\b communicate through ATC
\f1\b0 , ensuring safe coordination.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Define the Mediator Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Mediator Interface\
interface AirTrafficControl \{\
    void sendMessage(String message, Aircraft aircraft);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This defines a 
\f0\b centralized communication system
\f1\b0  for aircraft.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Concrete Mediator\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
import java.util.ArrayList;\
import java.util.List;\
\
// Concrete Mediator: Air Traffic Control Tower\
class AirTrafficControlTower implements AirTrafficControl \{\
    private List<Aircraft> aircrafts = new ArrayList<>();\
\
    public void registerAircraft(Aircraft aircraft) \{\
        aircrafts.add(aircraft);\
    \}\
\
    @Override\
    public void sendMessage(String message, Aircraft sender) \{\
        for (Aircraft aircraft : aircrafts) \{\
            if (aircraft != sender) \{ // Don't send message back to sender\
                aircraft.receiveMessage(message);\
            \}\
        \}\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b ATC Tower
\f1\b0  acts as a mediator, routing messages between aircraft.\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f0\b No direct communication between aircraft
\f1\b0 \'97only via ATC.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Aircraft Abstract Class
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Abstract Colleague: Aircraft\
abstract class Aircraft \{\
    protected AirTrafficControl atc;\
\
    public Aircraft(AirTrafficControl atc) \{\
        this.atc = atc;\
    \}\
\
    abstract void sendMessage(String message);\
    abstract void receiveMessage(String message);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Aircraft communicate only via ATC
\f1\b0  using the 
\f0\b Mediator interface
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Create Concrete Aircraft Classes
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 // Concrete Colleague: Airbus Aircraft\
class Airbus extends Aircraft \{\
    public Airbus(AirTrafficControl atc) \{\
        super(atc);\
    \}\
\
    @Override\
    void sendMessage(String message) \{\
        System.out.println("Airbus sending message: " + message);\
        atc.sendMessage(message, this);\
    \}\
\
    @Override\
    void receiveMessage(String message) \{\
        System.out.println("Airbus received message: " + message);\
    \}\
\}\
\
// Concrete Colleague: Boeing Aircraft\
class Boeing extends Aircraft \{\
    public Boeing(AirTrafficControl atc) \{\
        super(atc);\
    \}\
\
    @Override\
    void sendMessage(String message) \{\
        System.out.println("Boeing sending message: " + message);\
        atc.sendMessage(message, this);\
    \}\
\
    @Override\
    void receiveMessage(String message) \{\
        System.out.println("Boeing received message: " + message);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Airbus and Boeing planes do not talk to each other directly
\f1\b0 \'97they send messages to the ATC.\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  The ATC 
\f0\b forwards messages
\f1\b0  to all other registered aircraft.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Test the Mediator Pattern
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 public class MediatorPatternDemo \{\
    public static void main(String[] args) \{\
        // Create the Air Traffic Control Tower (Mediator)\
        AirTrafficControlTower atcTower = new AirTrafficControlTower();\
\
        // Create aircraft\
        Aircraft airbus = new Airbus(atcTower);\
        Aircraft boeing = new Boeing(atcTower);\
\
        // Register aircraft with ATC\
        atcTower.registerAircraft(airbus);\
        atcTower.registerAircraft(boeing);\
\
        // Aircraft sending messages\
        airbus.sendMessage("Requesting permission to land.");\
        boeing.sendMessage("Taking off now.");\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output
\f4\b0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 Airbus sending message: Requesting permission to land.\
Boeing received message: Requesting permission to land.\
\
Boeing sending message: Taking off now.\
Airbus received message: Taking off now.\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Airbus and Boeing never talk to each other directly
\f1\b0 \'97they communicate 
\f0\b via ATC (Mediator).
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Mediator Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Decouples components
\f1\b0  
\f3 \uc0\u8594 
\f1  No direct dependencies between objects.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Centralized control
\f1\b0  
\f3 \uc0\u8594 
\f1  The mediator handles complex interactions.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Adding/removing new objects does not affect others.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Useful for messaging systems
\f1\b0  
\f3 \uc0\u8594 
\f1  Chat apps, event management, traffic control, etc.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Mediator Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls33\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When a system has 
\f0\b many interacting objects
\f1\b0  that would otherwise create 
\f0\b tight coupling
\f1\b0 .\
\ls33\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b centralized communication
\f1\b0  is required (e.g., air traffic control, messaging apps).\
\ls33\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When objects need to 
\f0\b broadcast messages
\f1\b0  without knowing who listens (e.g., event-driven systems).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2655\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6372\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2655\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6372\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Air Traffic Control (ATC)
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Planes communicate through ATC instead of talking to each other.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2655\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6372\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Chat Applications
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Users send messages via a central server.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2655\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6372\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Smart Home Systems
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Devices (lights, fans, AC) communicate via a hub.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2655\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth6372\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Event Management
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Event-driven systems like pub-sub architectures.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
====================================================================================================\
\pard\pardeftab720\sa321\partightenfactor0

\f0\b \cf0 \strokec2 Memento Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Memento Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that captures and restores an object's state 
\f0\b without exposing
\f1\b0  its internal structure.\
It allows an object to 
\f0\b save its state
\f1\b0  (like a checkpoint) and restore it later\'97just like an 
\f0\b undo feature
\f1\b0  in applications.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Memento Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Supports undo/redo operations
\f1\b0  
\f3 \uc0\u8594 
\f1  Useful for text editors, games, and transactions.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates state restoration
\f1\b0  
\f3 \uc0\u8594 
\f1  Prevents exposing internal object details.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Maintains history
\f1\b0  
\f3 \uc0\u8594 
\f1  Can store multiple versions of an object's state.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Decouples originator and caretaker
\f1\b0  
\f3 \uc0\u8594 
\f1  Originator saves state, but caretaker manages it.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Text Editor Undo Feature\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b text editor
\f1\b0  where users can type, save states, and undo changes.\
The 
\f0\b Memento Pattern
\f1\b0  helps 
\f0\b save snapshots
\f1\b0  of the text and restore them when needed.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Memento Class\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 \
// Memento: Stores the state of the editor\
class TextEditorMemento \{\
    private final String text;\
\
    public TextEditorMemento(String text) \{\
        this.text = text;\
    \}\
\
    public String getText() \{\
        return text;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This 
\f0\b stores a snapshot
\f1\b0  of the text editor's state.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Originator Class (Text Editor)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Originator: The main object whose state we want to save and restore\
class TextEditor \{\
    private String text = "";\
\
    public void write(String newText) \{\
        text += newText;\
    \}\
\
    public String getText() \{\
        return text;\
    \}\
\
    // Saves current state to a Memento\
    public TextEditorMemento save() \{\
        return new TextEditorMemento(text);\
    \}\
\
    // Restores state from a Memento\
    public void restore(TextEditorMemento memento) \{\
        text = memento.getText();\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b TextEditor
\f1\b0  can 
\f0\b write text, save state, and restore state
\f1\b0  from a memento.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Caretaker Class (History Manager)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
import java.util.Stack;\
\
// Caretaker: Manages saved states\
class HistoryManager \{\
    private Stack<TextEditorMemento> history = new Stack<>();\
\
    public void save(TextEditorMemento memento) \{\
        history.push(memento);\
    \}\
\
    public TextEditorMemento undo() \{\
        if (!history.isEmpty()) \{\
            return history.pop();\
        \}\
        return null;\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b HistoryManager
\f1\b0  keeps track of 
\f0\b saved states
\f1\b0  and allows 
\f0\b undo operations
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Test the Memento Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class MementoPatternDemo \{\
    public static void main(String[] args) \{\
        TextEditor editor = new TextEditor();\
        HistoryManager history = new HistoryManager();\
\
        // User writes text and saves it\
        editor.write("Hello ");\
        history.save(editor.save());\
\
        editor.write("World!");\
        history.save(editor.save());\
\
        System.out.println("Current Text: " + editor.getText()); // Output: Hello World!\
\
        // Undo last change\
        editor.restore(history.undo());\
        System.out.println("After Undo: " + editor.getText()); // Output: Hello \
\
        // Undo again\
        editor.restore(history.undo());\
        System.out.println("After Second Undo: " + editor.getText()); // Output: (Empty)\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 yaml\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Current Text: Hello World!\
After Undo: Hello \
After Second Undo: \
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b The text editor successfully restores previous states using the Memento Pattern.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Memento Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Enables undo functionality
\f1\b0  
\f3 \uc0\u8594 
\f1  Restores previous states easily.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates state storage
\f1\b0  
\f3 \uc0\u8594 
\f1  Does not expose object internals.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Decouples object state from history
\f1\b0  
\f3 \uc0\u8594 
\f1  Originator handles state, caretaker stores it.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports multiple versions
\f1\b0  
\f3 \uc0\u8594 
\f1  Can keep multiple checkpoints for rollback.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Memento Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls34\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When an 
\f0\b object's state changes over time
\f1\b0 , and you need to 
\f0\b restore it
\f1\b0  later.\
\ls34\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When implementing an 
\f0\b undo/redo
\f1\b0  system (e.g., text editors, image editors).\
\ls34\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When saving a 
\f0\b history of transactions
\f1\b0  (e.g., banking apps, game checkpoints).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2243\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4285\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2243\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4285\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Text Editor Undo
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Restoring previous versions of typed text.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2243\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4285\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Game Save System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Storing player progress and restoring it later.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2243\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4285\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Banking Transactions
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Rolling back an operation if an error occurs.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2243\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4285\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Graphic Editors
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Undoing/redoing changes to images.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ====================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Observer Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Observer Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that establishes a 
\f0\b one-to-many dependency
\f1\b0  between objects, ensuring that when one object (the 
\f0\b subject
\f1\b0 ) changes state, all its 
\f0\b dependents (observers)
\f1\b0  are automatically notified and updated.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Observer Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Decouples subject and observers
\f1\b0  
\f3 \uc0\u8594 
\f1  The subject does not need to know how many observers exist or what they do.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports event-driven programming
\f1\b0  
\f3 \uc0\u8594 
\f1  Ideal for handling real-time updates.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Reduces direct dependencies
\f1\b0  
\f3 \uc0\u8594 
\f1  Multiple components can react to changes without modifying the subject.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves scalability
\f1\b0  
\f3 \uc0\u8594 
\f1  New observers can be added without modifying the subject.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: YouTube Subscription System\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Think of 
\f0\b YouTube
\f1\b0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls35\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When a 
\f0\b YouTuber (Subject)
\f1\b0  uploads a new video, all 
\f0\b Subscribers (Observers)
\f1\b0  get a notification.\
\ls35\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Subscribers 
\f0\b automatically receive updates
\f1\b0  without checking manually.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 The 
\f0\b Observer Pattern
\f1\b0  models this publisher-subscriber relationship.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Observer Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Observer Interface: Defines update behavior\
interface Subscriber \{\
    void update(String videoTitle);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This ensures that all observers 
\f0\b implement the update method
\f1\b0  to receive notifications.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create the Subject Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
import java.util.ArrayList;\
import java.util.List;\
\
// Subject Interface: Defines methods for adding, removing, and notifying observers\
interface YouTubeChannel \{\
    void subscribe(Subscriber subscriber);\
    void unsubscribe(Subscriber subscriber);\
    void notifySubscribers(String videoTitle);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b YouTubeChannel
\f1\b0  manages subscribers and 
\f0\b notifies them
\f1\b0  when a new video is uploaded.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Concrete Subject\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete Subject: YouTube Creator\
class YouTubeCreator implements YouTubeChannel \{\
    private List<Subscriber> subscribers = new ArrayList<>();\
    private String channelName;\
\
    public YouTubeCreator(String channelName) \{\
        this.channelName = channelName;\
    \}\
\
    @Override\
    public void subscribe(Subscriber subscriber) \{\
        subscribers.add(subscriber);\
    \}\
\
    @Override\
    public void unsubscribe(Subscriber subscriber) \{\
        subscribers.remove(subscriber);\
    \}\
\
    @Override\
    public void notifySubscribers(String videoTitle) \{\
        System.out.println("New video uploaded on " + channelName + ": " + videoTitle);\
        for (Subscriber subscriber : subscribers) \{\
            subscriber.update(videoTitle);\
        \}\
    \}\
\
    // Simulate video upload\
    public void uploadVideo(String videoTitle) \{\
        System.out.println(channelName + " uploaded: " + videoTitle);\
        notifySubscribers(videoTitle);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b YouTubeCreator
\f1\b0  stores 
\f0\b subscribers
\f1\b0  and notifies them when a new video is uploaded.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Create the Concrete Observers (Subscribers)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete Observer: YouTube User\
class YouTubeUser implements Subscriber \{\
    private String username;\
\
    public YouTubeUser(String username) \{\
        this.username = username;\
    \}\
\
    @Override\
    public void update(String videoTitle) \{\
        System.out.println(username + " received notification: New video uploaded - " + videoTitle);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each 
\f0\b YouTubeUser
\f1\b0  is a subscriber that 
\f0\b receives notifications
\f1\b0  when a new video is uploaded.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Test the Observer Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class ObserverPatternDemo \{\
    public static void main(String[] args) \{\
        // Create YouTube Channel\
        YouTubeCreator channel = new YouTubeCreator("TechReview");\
\
        // Create Subscribers\
        YouTubeUser user1 = new YouTubeUser("Alice");\
        YouTubeUser user2 = new YouTubeUser("Bob");\
\
        // Users subscribe to the channel\
        channel.subscribe(user1);\
        channel.subscribe(user2);\
\
        // Upload a new video\
        channel.uploadVideo("Best Laptops of 2025");\
\
        // Bob unsubscribes\
        channel.unsubscribe(user2);\
\
        // Upload another video\
        channel.uploadVideo("Top Smartphones 2025");\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 yaml\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
TechReview uploaded: Best Laptops of 2025\
New video uploaded on TechReview: Best Laptops of 2025\
Alice received notification: New video uploaded - Best Laptops of 2025\
Bob received notification: New video uploaded - Best Laptops of 2025\
\
Bob unsubscribes...\
\
TechReview uploaded: Top Smartphones 2025\
New video uploaded on TechReview: Top Smartphones 2025\
Alice received notification: New video uploaded - Top Smartphones 2025\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Subscribers are notified automatically
\f1\b0  when a new video is uploaded.\uc0\u8232 
\f2 \uc0\u9989 
\f1  When 
\f0\b Bob unsubscribes
\f1\b0 , he 
\f0\b stops receiving notifications
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Observer Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Loose coupling
\f1\b0  
\f3 \uc0\u8594 
\f1  The subject and observers are independent of each other.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Automatic notifications
\f1\b0  
\f3 \uc0\u8594 
\f1  Observers don\'92t need to check manually for updates.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Scalability
\f1\b0  
\f3 \uc0\u8594 
\f1  New observers can be added or removed dynamically.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encourages event-driven programming
\f1\b0  
\f3 \uc0\u8594 
\f1  Useful for real-time applications.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Observer Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls36\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When an object needs to 
\f0\b notify multiple dependent objects
\f1\b0  about state changes.\
\ls36\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When implementing 
\f0\b event-driven architectures
\f1\b0  (e.g., UI event listeners, notifications).\
\ls36\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need 
\f0\b real-time updates
\f1\b0  in applications (e.g., stock price updates, messaging apps).\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3072\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5852\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3072\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5852\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 YouTube Subscription System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Users get notified when new videos are uploaded.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3072\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5852\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Stock Market App
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Investors receive stock price updates.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3072\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5852\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 News Alert System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Users receive notifications when breaking news is published.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3072\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5852\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Weather Monitoring
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Weather apps notify users about real-time weather changes.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3072\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5852\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Event Listeners in UI
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Button clicks trigger events in GUI applications.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ====================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 State Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b State Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that allows an object to change its behavior when its 
\f0\b internal state changes
\f1\b0 , making it appear as if the object 
\f0\b changed its class
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the State Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Removes complex conditional logic
\f1\b0  
\f3 \uc0\u8594 
\f1  Avoids using large 
\f4 \strokec2 if-else
\f1 \strokec2  or 
\f4 \strokec2 switch
\f1 \strokec2  statements.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates state transitions
\f1\b0  
\f3 \uc0\u8594 
\f1  Each state is handled in a separate class.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves code maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Easy to add new states without modifying existing logic.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows the Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  New states can be introduced without altering existing code.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Traffic Light System\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 A 
\f0\b traffic light
\f1\b0  transitions between 
\f0\b Red 
\f3\b0 \uc0\u8594 
\f0\b  Green 
\f3\b0 \uc0\u8594 
\f0\b  Yellow
\f1\b0  in a cycle.\
Each light (state) has different behavior:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls37\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Red
\f1\b0  
\f3 \uc0\u8594 
\f1  Stop\
\ls37\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Green
\f1\b0  
\f3 \uc0\u8594 
\f1  Go\
\ls37\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Yellow
\f1\b0  
\f3 \uc0\u8594 
\f1  Slow down\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Instead of using complex 
\f4 \strokec2 if-else
\f1 \strokec2  statements, the 
\f0\b State Pattern
\f1\b0  models this as 
\f0\b separate state classes
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the State Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// State Interface: Defines behavior for different states\
interface TrafficLightState \{\
    void handleRequest(TrafficLight trafficLight);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This interface ensures all states implement the 
\f0\b handleRequest()
\f1\b0  method.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete State Classes\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete State: Red Light\
class RedLight implements TrafficLightState \{\
    @Override\
    public void handleRequest(TrafficLight trafficLight) \{\
        System.out.println("Red Light - STOP!");\
        trafficLight.setState(new GreenLight()); // Transition to Green\
    \}\
\}\
\
// Concrete State: Green Light\
class GreenLight implements TrafficLightState \{\
    @Override\
    public void handleRequest(TrafficLight trafficLight) \{\
        System.out.println("Green Light - GO!");\
        trafficLight.setState(new YellowLight()); // Transition to Yellow\
    \}\
\}\
\
// Concrete State: Yellow Light\
class YellowLight implements TrafficLightState \{\
    @Override\
    public void handleRequest(TrafficLight trafficLight) \{\
        System.out.println("Yellow Light - SLOW DOWN!");\
        trafficLight.setState(new RedLight()); // Transition to Red\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each light (state) 
\f0\b defines its own behavior
\f1\b0  and transitions to the next state.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Context Class (Traffic Light)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Context: Maintains a reference to the current state\
class TrafficLight \{\
    private TrafficLightState currentState;\
\
    public TrafficLight() \{\
        // Initial state is Red\
        this.currentState = new RedLight();\
    \}\
\
    public void setState(TrafficLightState state) \{\
        this.currentState = state;\
    \}\
\
    public void changeLight() \{\
        currentState.handleRequest(this);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b TrafficLight
\f1\b0  maintains the current state and delegates state transitions.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Test the State Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class StatePatternDemo \{\
    public static void main(String[] args) \{\
        TrafficLight trafficLight = new TrafficLight();\
\
        // Cycle through traffic lights\
        trafficLight.changeLight(); // Red 
\f7 \uc0\u8594 
\f4  Green\
        trafficLight.changeLight(); // Green 
\f7 \uc0\u8594 
\f4  Yellow\
        trafficLight.changeLight(); // Yellow 
\f7 \uc0\u8594 
\f4  Red\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 mathematica\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Red Light - STOP!\
Green Light - GO!\
Yellow Light - SLOW DOWN!\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Each state transitions correctly
\f1\b0  without 
\f4 \strokec2 if-else
\f1 \strokec2  logic.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulated behavior
\f1\b0  makes it 
\f0\b easy to add new states
\f1\b0  if needed.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of State Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Encapsulates state-specific behavior
\f1\b0  
\f3 \uc0\u8594 
\f1  Each state has its own class.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Removes large conditional statements
\f1\b0  
\f3 \uc0\u8594 
\f1  No need for 
\f4 \strokec2 if-else
\f1 \strokec2  or 
\f4 \strokec2 switch
\f1 \strokec2 .\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Easier state transitions
\f1\b0  
\f3 \uc0\u8594 
\f1  New states can be added without modifying the core logic.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Existing code remains untouched when adding new states.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the State Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls38\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When an object 
\f0\b changes behavior based on its state
\f1\b0 .\
\ls38\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b multiple if-else statements
\f1\b0  control an object\'92s behavior.\
\ls38\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b state transitions
\f1\b0  need to be 
\f0\b flexible and extendable
\f1\b0 .\
\ls38\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When modeling 
\f0\b state-driven workflows
\f1\b0 , such as UI navigation, game AI, or vending machines.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2126\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2126\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Traffic Light System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Red 
\f3 \uc0\u8594 
\f1  Green 
\f3 \uc0\u8594 
\f1  Yellow transitions.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2126\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Vending Machine
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Waiting for money 
\f3 \uc0\u8594 
\f1  Dispensing item 
\f3 \uc0\u8594 
\f1  Returning change.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2126\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Media Player
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Playing 
\f3 \uc0\u8594 
\f1  Paused 
\f3 \uc0\u8594 
\f1  Stopped.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2126\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 ATM Machine
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Idle 
\f3 \uc0\u8594 
\f1  Processing 
\f3 \uc0\u8594 
\f1  Dispensing Cash 
\f3 \uc0\u8594 
\f1  Out of Service.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2126\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5846\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Document Workflow
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Draft 
\f3 \uc0\u8594 
\f1  Review 
\f3 \uc0\u8594 
\f1  Approved 
\f3 \uc0\u8594 
\f1  Published.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ==================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Strategy Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Strategy Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that allows a class\'92s behavior to be selected at runtime. Instead of using multiple 
\f4 \strokec2 if-else
\f1 \strokec2  statements to determine which behavior to execute, it 
\f0\b encapsulates algorithms (strategies) in separate classes
\f1\b0  and allows them to be interchangeable.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Strategy Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Avoids complex conditional statements
\f1\b0  
\f3 \uc0\u8594 
\f1  No need for 
\f4 \strokec2 if-else
\f1 \strokec2  or 
\f4 \strokec2 switch
\f1 \strokec2  blocks.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates algorithms in separate classes
\f1\b0  
\f3 \uc0\u8594 
\f1  Each strategy is independent and reusable.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  New strategies can be added without modifying existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Allows runtime flexibility
\f1\b0  
\f3 \uc0\u8594 
\f1  Behavior can change dynamically based on context.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Payment System\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine an 
\f0\b e-commerce application
\f1\b0  where a user can pay using 
\f0\b Credit Card, PayPal, or Google Pay
\f1\b0 .\
Instead of hardcoding payment methods with 
\f4 \strokec2 if-else
\f1 \strokec2 , we can use the 
\f0\b Strategy Pattern
\f1\b0  to allow users to 
\f0\b select their preferred payment method at runtime
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Strategy Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Strategy Interface: Defines a common method for payment strategies\
interface PaymentStrategy \{\
    void pay(int amount);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  This ensures all payment strategies implement the 
\f0\b pay()
\f1\b0  method.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Strategy Classes\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete Strategy: Credit Card Payment\
class CreditCardPayment implements PaymentStrategy \{\
    private String cardNumber;\
\
    public CreditCardPayment(String cardNumber) \{\
        this.cardNumber = cardNumber;\
    \}\
\
    @Override\
    public void pay(int amount) \{\
        System.out.println("Paid $" + amount + " using Credit Card: " + cardNumber);\
    \}\
\}\
\
// Concrete Strategy: PayPal Payment\
class PayPalPayment implements PaymentStrategy \{\
    private String email;\
\
    public PayPalPayment(String email) \{\
        this.email = email;\
    \}\
\
    @Override\
    public void pay(int amount) \{\
        System.out.println("Paid $" + amount + " using PayPal: " + email);\
    \}\
\}\
\
// Concrete Strategy: Google Pay Payment\
class GooglePayPayment implements PaymentStrategy \{\
    private String phoneNumber;\
\
    public GooglePayPayment(String phoneNumber) \{\
        this.phoneNumber = phoneNumber;\
    \}\
\
    @Override\
    public void pay(int amount) \{\
        System.out.println("Paid $" + amount + " using Google Pay: " + phoneNumber);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each payment method 
\f0\b implements the 
\f5 \strokec2 pay()
\f0 \strokec2  method
\f1\b0  differently.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Context Class (Shopping Cart)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Context: Shopping Cart that allows setting a payment strategy at runtime\
class ShoppingCart \{\
    private PaymentStrategy paymentStrategy;\
\
    // Set payment strategy dynamically\
    public void setPaymentStrategy(PaymentStrategy paymentStrategy) \{\
        this.paymentStrategy = paymentStrategy;\
    \}\
\
    // Execute payment using the selected strategy\
    public void checkout(int amount) \{\
        if (paymentStrategy == null) \{\
            System.out.println("No payment method selected!");\
        \} else \{\
            paymentStrategy.pay(amount);\
        \}\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  The 
\f0\b ShoppingCart
\f1\b0  allows the payment strategy to be 
\f0\b changed dynamically
\f1\b0  at runtime.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Test the Strategy Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class StrategyPatternDemo \{\
    public static void main(String[] args) \{\
        ShoppingCart cart = new ShoppingCart();\
\
        // Pay using Credit Card\
        cart.setPaymentStrategy(new CreditCardPayment("1234-5678-9876-5432"));\
        cart.checkout(100);\
\
        // Change strategy: Pay using PayPal\
        cart.setPaymentStrategy(new PayPalPayment("user@example.com"));\
        cart.checkout(200);\
\
        // Change strategy: Pay using Google Pay\
        cart.setPaymentStrategy(new GooglePayPayment("9876543210"));\
        cart.checkout(300);\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 pgsql\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Paid $100 using Credit Card: 1234-5678-9876-5432\
Paid $200 using PayPal: user@example.com\
Paid $300 using Google Pay: 9876543210\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b The payment method is dynamically changed at runtime
\f1\b0  without modifying the existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b No 
\f5 \strokec2 if-else
\f0 \strokec2  conditions
\f1\b0  
\f3 \uc0\u8594 
\f1  The Strategy Pattern 
\f0\b chooses the appropriate strategy dynamically
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Strategy Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Encapsulates behaviors into separate classes
\f1\b0  
\f3 \uc0\u8594 
\f1  Easy to manage and extend.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Removes complex conditionals
\f1\b0  
\f3 \uc0\u8594 
\f1  No need for 
\f4 \strokec2 if-else
\f1 \strokec2  logic.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  New strategies can be added without modifying existing code.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Allows runtime flexibility
\f1\b0  
\f3 \uc0\u8594 
\f1  Strategies can be switched dynamically.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Strategy Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls39\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When multiple algorithms 
\f0\b solve the same problem
\f1\b0  but with different approaches.\
\ls39\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When behavior 
\f0\b changes dynamically
\f1\b0  at runtime.\
\ls39\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When a class has 
\f0\b multiple conditional statements (if-else, switch-case) for different behaviors
\f1\b0 .\
\ls39\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b isolate algorithm implementations
\f1\b0  from the main application logic.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2848\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3982\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2848\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3982\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Payment Processing System
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Credit Card, PayPal, Google Pay, etc.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2848\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3982\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Sorting Algorithms
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Bubble Sort, Merge Sort, Quick Sort, etc.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2848\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3982\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Compression Algorithms
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 ZIP, RAR, 7z, etc.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2848\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3982\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Travel Booking
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Choose between Flight, Train, or Bus.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2848\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3982\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Image Filters in an App
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Grayscale, Sepia, Blur, etc.\cell \lastrow\row
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ===========================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Template Method Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Template Method Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that defines the 
\f0\b skeleton of an algorithm
\f1\b0  in a 
\f0\b base class
\f1\b0  and allows 
\f0\b subclasses to provide specific implementations
\f1\b0  for certain steps without modifying the overall structure.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Template Method Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Encapsulates algorithm structure
\f1\b0  
\f3 \uc0\u8594 
\f1  The high-level logic is in the base class, while subclasses fill in specific details.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Avoids code duplication
\f1\b0  
\f3 \uc0\u8594 
\f1  Common behavior is implemented in one place.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Allows new implementations without modifying the base class.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Ensures consistent execution flow
\f1\b0  
\f3 \uc0\u8594 
\f1  The sequence of steps is predefined in the template method.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Cooking Process\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine a 
\f0\b cooking process
\f1\b0  where different dishes follow the 
\f0\b same basic steps
\f1\b0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls40\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Prepare Ingredients\
\ls40\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Cook the Dish\
\ls40\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Serve the Dish\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Each dish (e.g., 
\f0\b Pasta, Fried Rice, or Pizza
\f1\b0 ) follows the same structure but has 
\f0\b different implementations for cooking
\f1\b0 .\
Instead of duplicating the process for each dish, we can 
\f0\b define a template method
\f1\b0  that enforces the sequence and lets subclasses implement specific steps.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Abstract Base Class with the Template Method\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Abstract Class: Defines the template method and steps\
abstract class CookingRecipe \{\
    \
    // Template method (final to prevent overriding)\
    public final void cookDish() \{\
        prepareIngredients();\
        cook();\
        serve();\
    \}\
\
    // Common method (shared by all subclasses)\
    private void prepareIngredients() \{\
        System.out.println("Preparing ingredients...");\
    \}\
\
    // Abstract method (to be implemented by subclasses)\
    protected abstract void cook();\
\
    // Common method (shared by all subclasses)\
    private void serve() \{\
        System.out.println("Serving the dish!\\n");\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f5\b \strokec2 cookDish()
\f0 \strokec2  is the Template Method
\f1\b0  
\f3 \uc0\u8594 
\f1  It defines the sequence of steps.\uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f0\b Common steps (
\f5 \strokec2 prepareIngredients()
\f0 \strokec2  & 
\f5 \strokec2 serve()
\f0 \strokec2 ) are implemented in the base class.
\f1\b0 \uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f0\b The 
\f5 \strokec2 cook()
\f0 \strokec2  step is abstract
\f1\b0 , allowing subclasses to define their own implementations.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Subclasses for Specific Dishes\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete Class: Implements the cook step for Pasta\
class PastaRecipe extends CookingRecipe \{\
    @Override\
    protected void cook() \{\
        System.out.println("Boiling pasta and adding sauce...");\
    \}\
\}\
\
// Concrete Class: Implements the cook step for Fried Rice\
class FriedRiceRecipe extends CookingRecipe \{\
    @Override\
    protected void cook() \{\
        System.out.println("Stir-frying rice with vegetables and eggs...");\
    \}\
\}\
\
// Concrete Class: Implements the cook step for Pizza\
class PizzaRecipe extends CookingRecipe \{\
    @Override\
    protected void cook() \{\
        System.out.println("Baking pizza with cheese and toppings...");\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  Each dish implements its own 
\f0\b cooking process
\f1\b0  while following the 
\f0\b same template method
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Test the Template Method Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class TemplateMethodDemo \{\
    public static void main(String[] args) \{\
        // Create Pasta recipe\
        CookingRecipe pasta = new PastaRecipe();\
        pasta.cookDish();\
\
        // Create Fried Rice recipe\
        CookingRecipe friedRice = new FriedRiceRecipe();\
        friedRice.cookDish();\
\
        // Create Pizza recipe\
        CookingRecipe pizza = new PizzaRecipe();\
        pizza.cookDish();\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 csharp\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Preparing ingredients...\
Boiling pasta and adding sauce...\
Serving the dish!\
\
Preparing ingredients...\
Stir-frying rice with vegetables and eggs...\
Serving the dish!\
\
Preparing ingredients...\
Baking pizza with cheese and toppings...\
Serving the dish!\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  The 
\f0\b steps are executed in the correct order
\f1\b0  for all dishes.\uc0\u8232 
\f2 \uc0\u9989 
\f1  The 
\f0\b cooking step is customized
\f1\b0  in each subclass.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b No duplicated code
\f1\b0  for common steps like preparation and serving.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Template Method Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Defines a standard algorithm structure
\f1\b0  
\f3 \uc0\u8594 
\f1  The flow remains consistent across implementations.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encapsulates common behavior in one place
\f1\b0  
\f3 \uc0\u8594 
\f1  Reduces duplication and improves maintainability.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  New implementations can be added without modifying the base class.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Encourages code reusability
\f1\b0  
\f3 \uc0\u8594 
\f1  Subclasses only implement what is necessary.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Template Method Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls41\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you have an 
\f0\b algorithm with fixed steps
\f1\b0 , but 
\f0\b some steps require different implementations
\f1\b0 .\
\ls41\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you 
\f0\b want to avoid code duplication
\f1\b0  in subclasses by extracting common logic into a base class.\
\ls41\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When 
\f0\b the sequence of operations must remain unchanged
\f1\b0 , but certain steps can be customized.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2538\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4925\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2538\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4925\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Cooking Process
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Preparing ingredients 
\f3 \uc0\u8594 
\f1  Cooking 
\f3 \uc0\u8594 
\f1  Serving.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2538\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4925\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Online Order Processing
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Validate Order 
\f3 \uc0\u8594 
\f1  Process Payment 
\f3 \uc0\u8594 
\f1  Ship Order.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2538\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4925\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Document Generation
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Create Header 
\f3 \uc0\u8594 
\f1  Generate Content 
\f3 \uc0\u8594 
\f1  Add Footer.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2538\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4925\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Game AI Behavior
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Detect Enemy 
\f3 \uc0\u8594 
\f1  Choose Strategy 
\f3 \uc0\u8594 
\f1  Attack.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2538\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4925\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Software Build Process
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Compile Code 
\f3 \uc0\u8594 
\f1  Run Tests 
\f3 \uc0\u8594 
\f1  Deploy.\cell \lastrow\row
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 ==========================================================================================\
\pard\pardeftab720\sa321\partightenfactor0
\cf0 \strokec2 Visitor Pattern (Detailed Explanation)\
\pard\pardeftab720\sa298\partightenfactor0
\cf0 \strokec2 Intent\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 The 
\f0\b Visitor Pattern
\f1\b0  is a 
\f0\b behavioral design pattern
\f1\b0  that allows adding new operations to objects 
\f0\b without modifying their structure
\f1\b0 .\
Instead of changing the object\'92s class to accommodate new functionality, 
\f0\b the behavior is moved into a separate visitor class
\f1\b0  that is applied to the object.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Why Use the Visitor Pattern?\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Separates operations from object structure
\f1\b0  
\f3 \uc0\u8594 
\f1  New functionality can be added without modifying existing classes.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Existing elements remain unchanged when introducing new behaviors.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports different operations on a group of related objects
\f1\b0  
\f3 \uc0\u8594 
\f1  Each visitor can perform distinct actions.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Reduces code duplication
\f1\b0  
\f3 \uc0\u8594 
\f1  Common operations are centralized in visitors instead of being spread across multiple classes.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Real-World Example: Shopping Cart with Discounts\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0 \cf0 \strokec2 Imagine an 
\f0\b e-commerce shopping cart
\f1\b0  with different products:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls42\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Books
\f1\b0 \
\ls42\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Electronics
\f1\b0 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 Now, we want to apply 
\f0\b different discount rules
\f1\b0  without modifying the 
\f4 \strokec2 Book
\f1 \strokec2  or 
\f4 \strokec2 Electronic
\f1 \strokec2  classes.\uc0\u8232 Using the 
\f0\b Visitor Pattern
\f1\b0 , we can add discount logic 
\f0\b separately
\f1\b0  without changing product classes.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Step-by-Step Implementation in Java\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 Step 1: Create the Element Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Element Interface: Defines the accept method for visitors\
interface Item \{\
    void accept(ShoppingCartVisitor visitor);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b All items (Book, Electronic, etc.) implement this interface.
\f1\b0 \uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  The 
\f0\b accept()
\f1\b0  method allows a visitor to operate on an item.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 2: Create Concrete Element Classes\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete Element: Book\
class Book implements Item \{\
    private String title;\
    private double price;\
\
    public Book(String title, double price) \{\
        this.title = title;\
        this.price = price;\
    \}\
\
    public double getPrice() \{\
        return price;\
    \}\
\
    @Override\
    public void accept(ShoppingCartVisitor visitor) \{\
        visitor.visit(this);\
    \}\
\}\
\
// Concrete Element: Electronic\
class Electronic implements Item \{\
    private String brand;\
    private double price;\
\
    public Electronic(String brand, double price) \{\
        this.brand = brand;\
        this.price = price;\
    \}\
\
    public double getPrice() \{\
        return price;\
    \}\
\
    @Override\
    public void accept(ShoppingCartVisitor visitor) \{\
        visitor.visit(this);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Each product type implements 
\f5 \strokec2 accept()
\f0 \strokec2  to allow visitors.
\f1\b0 \uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f4 \strokec2 Book
\f1 \strokec2  and 
\f4 \strokec2 Electronic
\f1 \strokec2  objects 
\f0\b do not contain discount logic
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 3: Create the Visitor Interface\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Visitor Interface: Defines visit methods for different items\
interface ShoppingCartVisitor \{\
    void visit(Book book);\
    void visit(Electronic electronic);\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Each type of item has a corresponding 
\f5 \strokec2 visit
\f0 \strokec2  method.
\f1\b0 \uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  This allows 
\f0\b applying different logic for each item type
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 4: Create Concrete Visitor Class (Discount Calculator)\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
// Concrete Visitor: Applies discounts to items\
class DiscountCalculator implements ShoppingCartVisitor \{\
    @Override\
    public void visit(Book book) \{\
        double discount = book.getPrice() > 20 ? 5.0 : 2.0;\
        System.out.println("Book Discount: $" + discount);\
    \}\
\
    @Override\
    public void visit(Electronic electronic) \{\
        double discount = electronic.getPrice() > 100 ? 10.0 : 5.0;\
        System.out.println("Electronic Discount: $" + discount);\
    \}\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u55357 \u56633 
\f1  
\f0\b Different discount rules for books and electronics.
\f1\b0 \uc0\u8232 
\f2 \uc0\u55357 \u56633 
\f1  
\f0\b New logic can be added without modifying product classes.
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Step 5: Test the Visitor Pattern\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 java\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
public class VisitorPatternDemo \{\
    public static void main(String[] args) \{\
        Item[] items = \{\
            new Book("Java Design Patterns", 30),\
            new Book("Python Basics", 15),\
            new Electronic("Smartphone", 200),\
            new Electronic("Headphones", 50)\
        \};\
\
        // Create a visitor (discount calculator)\
        ShoppingCartVisitor discountCalculator = new DiscountCalculator();\
\
        // Apply visitor to all items\
        for (Item item : items) \{\
            item.accept(discountCalculator);\
        \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1 \cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 \strokec2 Output\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf0 \strokec2 nginx\

\f6 \cf4 \cb5 \strokec4 CopyEdit
\f4 \cf0 \cb1 \strokec2 \
Book Discount: $5.0\
Book Discount: $2.0\
Electronic Discount: $10.0\
Electronic Discount: $5.0\
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf0 \strokec2 \uc0\u9989 
\f1  
\f0\b Discounts applied correctly for each product type.
\f1\b0 \uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b New discount rules can be added easily without modifying 
\f5 \strokec2 Book
\f0 \strokec2  or 
\f5 \strokec2 Electronic
\f0 \strokec2 .
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Key Takeaways\
\pard\pardeftab720\sa280\partightenfactor0
\cf0 \strokec2 1. Advantages of Visitor Pattern\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0 \cf0 \uc0\u9989 
\f1  
\f0\b Encapsulates operations outside object structures
\f1\b0  
\f3 \uc0\u8594 
\f1  New behaviors are added without modifying objects.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Follows Open/Closed Principle
\f1\b0  
\f3 \uc0\u8594 
\f1  Supports adding new operations without changing existing classes.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Improves maintainability
\f1\b0  
\f3 \uc0\u8594 
\f1  Centralizes logic in visitor classes rather than scattering it in multiple places.\uc0\u8232 
\f2 \uc0\u9989 
\f1  
\f0\b Supports multiple operations
\f1\b0  
\f3 \uc0\u8594 
\f1  Different visitors can be created for 
\f0\b discounts, tax calculations, reports, etc.
\f1\b0 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b \cf0 2. When to Use the Visitor Pattern?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls43\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you need to 
\f0\b apply multiple operations to a set of objects without modifying them
\f1\b0 .\
\ls43\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When new behaviors should be 
\f0\b easily extendable
\f1\b0 .\
\ls43\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When objects have 
\f0\b stable structures
\f1\b0 , but operations on them 
\f0\b change frequently
\f1\b0 .\
\ls43\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When an application needs 
\f0\b different processing logic for different object types
\f1\b0 .\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 Example Use Cases\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4009\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4965\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 \strokec2 Use Case\cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf0 Example\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4009\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4965\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Shopping Cart
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Apply discounts, calculate tax, generate invoices.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4009\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4965\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 File System Operations
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Perform compression, encryption, or indexing.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4009\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4965\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 AST (Abstract Syntax Tree) Processing
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Interpret, compile, or optimize source code.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4009\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4965\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Bank Transactions
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Apply fees, interest calculations, or fraud detection.\cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth4009\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4965\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0\b \cf0 Game Development
\f1\b0 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Apply different effects or AI behaviors to objects.\cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \strokec2 ===============================================================================================================\
\
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\qc\partightenfactor0

\f6 \cf4 \strokec4 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b \cf0 \strokec2 \
}